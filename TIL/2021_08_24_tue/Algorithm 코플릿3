알고리즘 코플릿 3번

문제
-> N * N의 크기를 가진 보드판 위에서 게임을 하려고 합니다. 게임의 룰은 다음과 같습니다.
    좌표 왼쪽 상단(0, 0)에 말을 놓는다.
    말은 상, 하, 좌, 우로 이동할 수 있고, 플레이어가 조작할 수 있다.
    조작의 기회는 딱 한 번 주어진다.
    조작할 때 U, D, L, R은 각각 상, 하, 좌, 우를 의미하며 한 줄에 띄어쓰기 없이 써야 한다.
    예시: UDDLLRRDRR, RRRRR
    한 번 움직일 때마다 한 칸씩 움직이게 되며, 그 칸 안의 요소인 숫자를 획득할 수 있다.
    방문한 곳을 또 방문해도 숫자를 획득할 수 있다.
    보드 밖을 나간 말은 OUT 처리가 된다.
    칸 안의 숫자는 0 또는 1이다.
    단, 좌표 왼쪽 상단(0, 0)은 항상 0이다.
    획득한 숫자를 합산하여 숫자가 제일 큰 사람이 이기게 된다.
    보드판이 담긴 board와 조작하려고 하는 문자열 operation이 주어질 때, 말이 해당 칸을 지나가면서 획득한 숫자의 합을 구하는 함수를 작성하세요.

인자1:board
-> number 타입의 2차원 배열
-> 2 <= board.length <= 1,000
-> 예: [ [0, 0, 1], [1, 0, 1], [1, 1, 1] ]

인자2:operation
-> string 타입의 대문자 영어가 쓰여진 문자열
-> 1 <= operation.length <= board.length * 2
-> U, L, D, R 이외의 문자열은 없습니다.

출력
-> Number 타입을 반환해야 합니다.
-> board와 operation이 입력값의 예시 ([ [0, 0, 1], [1, 0, 1], [1, 1, 1] ], DDR)일 때, (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) 순서로 이동하게 되고, 각 0, 1, 1, 1을 얻어 3을 반환합니다.

주의사항
-> 만약, 말이 보드 밖으로 나갔다면 즉시 OUT 을 반환합니다.

입출력 예시
⬇️⬇️⬇️⬇️⬇️⬇️

예시1).

const board1 = [
  [0, 0, 0, 1],
  [1, 1, 1, 0],
  [1, 1, 0, 0],
  [0, 0, 0, 0]
]
const output1 = boardGame(board1, 'RRDLLD');
console.log(output1); // 4

예시2).

const board2 = [
  [0, 0, 1],
  [1, 1, 1],
  [1, 0, 0]
]
const output2 = boardGame(board2, 'UUUDD');
console.log(output2); // 'OUT'

예시3).

const board3 = [
  [0, 0, 0, 0, 0],
  [0, 0, 1, 0, 0],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0]
]
const output3 = boardGame(board3, 'DDRRRUDUDUD');
console.log(output3); // 0

문제 풀이
⬇️⬇️⬇️⬇️⬇️

function boardGame(board, operation) {
  // TODO: 여기에 코드를 작성하세요.
  const direction = { // 우선 direction이라는 객체 안에 키로 방향들(U,D,L,R)을, 값으로는 각각의 움직임을 할당해준다.
    U: [-1, 0],
    D: [1, 0],
    L: [0, -1],
    R: [0, 1]
  }

  let answer = 0; // 리턴할 answer을 선언, 및 0으로 할당해주고,
  let [y, x] = [0, 0]  // 처음 시작을 2차원 배열의 좌측상단에서 해야하기 때문에 [y, x]를 [0, 0]으로 할당해준다.
  
  let isValid = (y, x) => 0 <= y && y < board.length && 0 <= x && x < board.length; // 움직이더라도, 그 움직임이 보드안에 있는지 확인하기 위한 isValid함수,

  for(let op of operation) { // operation(UDLR)들을 하나씩 순회해줄텐데,
    y = y + direction[op][0]; // y의 값에다가 위 선언해준 direction 객체의 키에 해당하는 operation의 op(배열)의 0번째 인덱스의 값을 넣어주고,
    x = x + direction[op][1]; // x의 값에다가는 위 선언해준 direction 객체의 키에 해당하는 operation의 op(배열)의 1번째 인덱스의 값을 넣어주고,
    if(!isValid(y, x)) { // isValid함수를 통해 보드 밖으로 나가게 된다면 "OUT"을 리턴하고, 
      return 'OUT';
    }
    answer = answer + board[y][x]; // 보드 안에서만 움직였다면, 움질일때마다 얻은 값들을 다 더해줘야 하기 때문에, answer에다가 움직일때마다 더해준다
  }
  return answer; // 다 더해준 그 최종값을 리턴한다.
};
