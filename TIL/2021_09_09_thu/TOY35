<TIL>

Toy 35번

문제
-> 아래와 같이 정의된 ugly numbers 중 n번째 수를 리턴해야 합니다.
    - ugly number는 2, 3, 5로만 나누어 떨어지는 수이다.
    - 1은 1번째 ugly number 이다.
    - 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, ...


인자 1 : n
-> number 타입의 자연수 (n >= 1)


출력
-> number 타입을 리턴해야 합니다.


주의사항
-> ugly numbers를 배열에 저장했을 때, n번째 ugly number의 위치는 인덱스 n-1 입니다.


입출력 예시
⬇️⬇️⬇️⬇️⬇️⬇️

let result = uglyNumbers(1);
console.log(result); // --> 1

result = uglyNumbers(3);
console.log(result); // --> 3


Advanced?
⬇️⬇️⬇️⬇️⬇️⬇️

-> 단순히 처음부터 끝까지 모든 수에 대해서 나눗셈 연산을 하는 대신 다른 방법(O(N))을 탐구해 보세요.


힌트!!!!!!!!!
⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️

-> 나눗셈 연산을 매번 다시 할 필요가 없습니다. ugly number에 2, 3 또는 5를 곱한 수 역시 ugly number 입니다.


문제 풀이
⬇️⬇️⬇️⬇️⬇️

const uglyNumbers = function (n) {
  // TODO: 여기에 코드를 작성합니다.
  
  let uglyNums = [1]; // uglyNums라는 1을 넣은 배열을 만들어주고,
  let idx2 = 0, // idx2, idx3, idx5에 각각 0을 할당,
      idx3 = 0,
      idx5 = 0;

  for(let i = 0; i < n; i++) { // n보다 작을때까지만 반복문을 돌리고,
    let nM2 = uglyNums[idx2] * 2; // nM2에 1*2를 한 값을,
    let nM3 = uglyNums[idx3] * 3; // nM3에 1*3를 한 값을,
    let nM5 = uglyNums[idx5] * 5; // nM5에 1*5를 한 값을 할당하고,
    let nUM = Math.min(nM2, nM3, nM5); // nUM에 위의 값들 중 가장 작은 값을 할당하고,

    uglyNums.push(nUM); // nUM을 uglyNums에 push한다.

    if(nUM === nM2) idx2++; // 반복문을 한번씩 돌릴때마다 nM2가 nUM이랑 같다면, idx2에 1씩 더해준다.
    if(nUM === nM3) idx3++; // 반복문을 한번씩 돌릴때마다 nM3가 nUM이랑 같다면, idx3에 1씩 더해준다.
    if(nUM === nM5) idx5++; // 반복문을 한번씩 돌릴때마다 nM5가 nUM이랑 같다면, idx5에 1씩 더해준다.
  }

  return uglyNums[n - 1]; // 최종적으로 배열이 담겼을때 그 배열의 n-1번째 숫자를 리턴한다.

};
