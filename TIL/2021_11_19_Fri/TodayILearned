++++++++++++++++++++++

    React 라이브러리에서 제공하는 기본 내장 API 함수에 대해서 설명해주세요. (ex. useEffect, useCallback)

    리액트 훅이 있기 이전의 리액트 컴포넌트는 클래스형과 함수형으로 나뉩니다.
    기존의 개발 방식 또한 일반적으로 함수형 컴포넌트를 주로 사용하되,
    상태(state)나 생명 주기 메서드(life cycle method / 생명주기 메서드는 컴포넌트가 브라우저상에 나타나고, 업데이트되고, 사라지게 될 때 호출되는 메서드들이다)를 필요로 할 때에만 클래스형 컴포넌트를 사용하는 방식이었습니다. 
    그렇게 해야 했던 이유는, 클래스형 컴포넌트가 함수형 컴포넌트에 비해 가지는 단점들 때문이었습니다.

    기본적으로 클래스형 컴포넌트는 함수형 컴포넌트에 비해 코드가 길고, 복잡한 편이었고, 또 로직의 재사용이 어려웠습니다. 그러한 단점들 때문에 일반적으로는 주로 함수형 컴포넌트를 많이 사용했고, 필요 시에만 클래스형 컴포넌트를 사용했던 것입니다.

    클래스형 컴포넌트들이 가지는 이러한 단점들에도 불구하고 우리가 그동안 클래스형 컴포넌트를 사용해야 했던 이유는, 위에서 언급 했듯이 상태(state)관리나 생명주기 메서드(life cycle method)의 사용 때문이었습니다.
    비록 클래스형 컴포넌트들이 함수형에 비해 코드가 길고 복잡하더라고, 클래스의 힘을 빌려야만 리액트가 원활하게 작동할 수 있었던 것이죠.

    그런데 hooks 가 등장함에 따라 함수형 컴포넌트에서도 이러한 클래스형 컴포넌트의 작업들을 할 수 있게 되었습니다.
    기존의 클래스형 컴포넌트가 가지고 있던 복잡성, 재사용성의 단점들까지 같이 해결하면서 말이죠.

    이러한 hooks에는 대표적으로 2가지가 있는데, 첫번째가 state hook, 두번째가 effect hook입니다.

    여기에서 이제 리액트 라이브러리에서 제공하는 기본 내장 api 함수인 useState, useEffect 에 대해 설명 할 수 있을텐데, useState는 state hook 이고, useEffect 는 effect hook 입니다.

    우선 useState에 대해서 먼저 설명하자면, 
    이 useState로 인해 리액트에서 함수형 컴포넌트 에서도 상태 관리가 가능해집니다.
    useState는 인자로 초기값을 받고, 현재 상태(state)와 현재의 상태를 업데이트 할 수 있는 함수 setState를 반환해주는데, 이 함수는 핸들러나 다른 곳에서도 호출 할 수 있습니다. 즉 다른곳에서도 상태(state)를 바꿔줄 수 있다는것이죠. 
    useState는 클래스에서 사용하는 this.setState와 유사하지만 이전 state와 새로운 state를 합치지 않는다는 차이점이 있습니다.

    다음으로 넘어가 useEffect에 대해서 설명드리자면,
    우선 이름이 effect인 이유는, 저희가 주로 수행하는 data를 fetch하는 등의 작업들이 side effect에 해당되기 때문에 이름도 그와 비슷하게 useEffect가 되었습니다.
    useEffect는 리액트의 함수형 컴포넌트에서도 이러한 side effects를 실행할 수 있도록 해줍니다.
    클래스형 컴포넌트의 componentDidMount나 componentDidUpdate, componentWillUnmount와 같이 생명주기(lifecycle)를 다루는 목적으로 제공되지만 이를 하나의 API로 통합하였다는 것이 차이점입니다.

    useEffect는 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정 할 수 있는데 첫번째 인자로 effect 콜백 함수(실행시키고 싶은 함수)가 전달되고, 두번째 인자로 input이 전달됩니다. 위에서도 말씀 드렸듯이 기본적으로 useEffect는 render 될 때 마다 매번 호출되게 되는데 두번째 인자인 input을 설정함으로 인해 특정 상태(state)가 변경될 경우에만 effect 콜백함수가 실행될 수 있도록 설정 할 수 있습니다. 

    useEffect가 클래스의 componentDidMount와 componentDidUpdate, componentWillUnmount를 합쳐 놓은 것이라고 했는데 그렇다면 componentWillUnmount는 어떻게 처리 할 수 있을지 궁금하실 것 같은데요,
    useEffect에서는 인자로 넘겨주는 effect 콜백 함수의 return값이 있는 경우, hook의 cleanup 함수로 인식하고 다음 effect 콜백 함수가 실행되기 전에 실행해줌으로써 클래스의 componentWillUnmount의 역할을 해줄 수 있습니다.

++++++++++++++++++++++

    위에 적어놓은 내용들은 19일 페어코딩 및 스킬 인터뷰 시간에 발표해야 할 내용들이다.
    사실 공부는 18일 저녁부터 해서 19일인 오늘 날짜에 적어야 하는지 고민이 좀 되긴 했는데,
    18일부터 공부를 하다보니 지금 시간이 19일 새벽 00시 25분이 되기도 했고,
    또 어제의 TIL에는 어제 발표한 내용이 적혀 있다보니 오늘 날짜에다가 적어두기로 했다.
    주제는 위에서 볼 수 있다시피 React 라이브러리에서 제공하는 기본 내장 API 함수인 useState, useEffect에 관한 내용이다.
    뭔가 전에도 사용을 많이 하긴 했지만, 검색을 해보면서 다시 한 번 공부를 해보니 훨씬 더 이해가 많이 되는 기분이다. 내일 발표 전 다시 한 번 공부해보고 잘 전달 할 수 있으면 좋겠다.

++++++++++++++++++++++

    페어코딩 관련 코딩테스트 문제는 프로그래머스 레벨 1단계 수포자 관련 문제였다.
    링크는 https://programmers.co.kr/learn/courses/30/lessons/42840 여기 있고,
    다행히도 크게 문제 없이 풀어볼 수 있었다.
    내일 실제로 페어시간에 풀어볼때 말로 잘 설명해가면서 풀어볼 수 있으면 좋겠다.

++++++++++++++++++++++

    오늘 페어시간이 끝났다.
    위 적은 내용들을 최대한 간단히 적어봤는데 다시 정리한 내용을 아래에 적어보려고 한다.


        React 라이브러리에서 제공하는 기본 내장 API 함수에 대해서 설명해주세요. 
        (ex. useEffect, useState)


        이전의 리액트 컴포넌트는 클래스형과 함수형으로 나뉨
        기존의 개발 방식 또한 일반적으로 함수형 컴포넌트를 주로 사용하되,
        상태(state)나 생명 주기 메서드(life cycle method / 생명주기 메서드는 컴포넌트가 브라우저상에 나타나고, 업데이트되고, 사라지게 될 때 호출되는 메서드들이다)를 필요로 할 때에만 클래스형 컴포넌트를 사용하는 방식
        기본적으로 클래스형 컴포넌트는 함수형 컴포넌트에 비해 코드가 길고, 복잡한 편이었고, 또 로직의 재사용이 어려움
        그러한 단점들 때문에 일반적으로는 주로 함수형 컴포넌트를 많이 사용했고, 필요 시에만 클래스형 컴포넌트를 사용했던 것
        클래스형 컴포넌트들이 가지는 이러한 단점들에도 불구하고 우리가 그동안 클래스형 컴포넌트를 사용해야 했던 이유는 클래스의 힘을 빌려야만 리액트가 원활하게 작동할 수 있었던 것

        hooks 가 등장함에 따라 함수형 컴포넌트에서도 기존의 클래스형 컴포넌트가 가지고 있던 복잡성, 재사용성등의 단점들까지 같이 해결하면서  이러한 클래스형 컴포넌트의 작업들을 할 수 있게 됨
        이러한 hooks에는 대표적으로 2가지가 있는데, 첫번째가 state hook, 두번째가 effect hook
        여기에서 이제 리액트 라이브러리에서 제공하는 기본 내장 api 함수인 useState, useEffect 에 대해 설명 할 수 있을텐데


        /////////////////////////////////////////////////////////////////////////////////////////////////////////


        우선 useState에 대해서 먼저 설명하자면, 
        이 useState로 인해 리액트에서 함수형 컴포넌트에서도 상태 관리가 가능
        useState는 인자로 초기값을 받고, 현재 상태(state)와 현재의 상태를 업데이트 할 수 있는 함수 setState를 반환
        이 함수는 핸들러나 다른 곳에서도 호출 할 수 있고
        클래스에서 사용하는 this.setState와 유사하지만 이전 state와 새로운 state를 합치지 않는다는 차이점이 있다


        /////////////////////////////////////////////////////////////////////////////////////////////////////////


        useEffect에 대해서 설명드리자면,
        이름이 effect인 이유는, 저희가 주로 수행하는 data를 fetch하는 등의 작업들이 side effect에 해당되기 때문
        useEffect는 리액트의 함수형 컴포넌트에서도 이러한 side effects를 실행할 수 있도록 해줌
        클래스형 컴포넌트의 componentDidMount나 componentDidUpdate, componentWillUnmount와 같이 생명주기(lifecycle)를 다루는 목적으로 제공되지만 이를 하나의 API로 통합하였다는 것이 차이점
        useEffect는 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정 할 수 있는데 첫번째 인자로 effect 콜백 함수(실행시키고 싶은 함수)가 전달되고, 두번째 인자로 input이 전달됨
        두번째 인자인 input을 설정함으로 인해 특정 상태(state)가 변경될 경우에만 effect 콜백함수가 실행될 수 있도록 설정 할 수 있음
        이는 클래스의 componentDidMount와 componentDidUpdate에 해당하게 되는데,
        useEffect에서는 인자로 넘겨주는 effect 콜백 함수의 return값이 있는 경우, hook의 cleanup 함수로 인식하고 다음 effect 콜백 함수가 실행되기 전에 실행해줌으로써 클래스의 componentWillUnmount의 역할을 해줄 수 있음.


++++++++++++++++++++++

    수료식이 끝났다.
    역시나 기분이 좀 묘하다.
    지난 7개월이 주마등처럼 지나간다.
    주말동안만 푹 쉬고 다음주부터 다시 열심히 달려볼테지만,
    이틀만 쉬자.
    수료하기까지, 정말 고생 많았다.
    수고했네.

++++++++++++++++++++++