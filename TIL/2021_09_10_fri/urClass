가비지 컬렉션?

-> 프로그램에서 더 이상 사용하지 않는 메모리를 자동으로 정리하는 것이다.
-> 이 기능을 가진 언어(혹은 엔진)는 자바, C#, 자바스크립트 등이 있다.




대표적인 가비지 컬렉션의 방법?

-> 트레이싱?
    -> 한 객체에 flag를 두고, 가비지 컬렉션 사이클마다 flag에 표시 후 삭제하는 mark and sweep 방법이다.
        ㄴ 객체에 in-use flag를 두고, 사이클마다 메모리 관리자가 모든 객체를 추적해서 사용중인지 아닌지를 표시(mark)한다. 
        ㄴ 그 후 표시되지 않은 객체를 삭제(sweep)하는 단계를 통해 메모리를 해제한다.


-> 레퍼런스 카운팅?
    -> 한 객체를 참조하는 변수의 수를 추적하는 방법이다.
        ㄴ 객체를 참조하는 변수는 처음에는 특정 메모리에 대해 레퍼런스가 하나뿐 이지만, 변수의 레퍼런스가 복사될 때마다 레퍼런스 카운트가 늘어난다.
        ㄴ 객체를 참조하고 있던 변수의 값이 바뀌거나, 변수 스코프를 벗어나면 레퍼런스 카운트는 줄어든다.
        ㄴ 레퍼런스 카운트가 0이 되면, 그 객체와 관련한 메모리는 비울 수 있게 된다.
        ㄴ 레퍼런스 카운트가 0이 된다는 말은 아무도 그 객체에 대한 레퍼런스를 가지고 있지 않다는 말과 같기 때문이다.



---------------------------------------------------------


<캐시>


캐시가 뭐야?

-> 많은 시간이나 연산이 필요한 작업의 결과를 저장해두는 것을 의미한다.
-> 컴퓨팅에서 캐시는 일반적으로 일시적인(temporarily) 데이터를 저장하기 위한 목적으로 존재하는 고속의 데이터 저장공간이다.
-> 첫 작업 이후에 이 데이터에 대한 요청이 있을 경우, 데이터의 기본 저장공간에 접근할 때보다 더 빠르게 요청을 처리할 수 있게된다.
-> 캐싱을 사용하면 이전에 검색하거나 계산한 데이터를 효율적으로 재사용할 수 있다.
(정말 간단히 예를 들자면 내가 만약 처음으로 어떤 한 친구집네 집에 놀러 가게 된다면, 처음에는 가는 길을 모르니 네이버 지도 앱이나 구글맵을 통해서 검색을 해서 가야할것이다. 근데 한번 가보니 이게 왠걸? 가는 길이 그렇게 복잡하거나 어렵지 않잖아? 오케이 기억해뒀다가 다음에도 또 놀러가게 되면 검색하지 말고 그냥 바로 한번에 쑥 찾아가야지 하면서 친구네 집에 갈때 필요한 정보들을 내 머릿속 캐시에 저장을 해둔다. 그리곤 시간이 흘러 또 다시 그 친구네 집에 놀러가게 되는 상황이 오면 처음처럼 구글맵이나 네이버 지도 앱을 사용해서 친구네 집에 찾아가는것이 아니라 내 머리속에 저장된 캐시에서 친구네 집에 가는 데이터들을 불러와서 쉽고 빠르게, 검색 없이 친구네 집에 놀러가게 되는것이다. 이렇게 했을때의 장점은 처음에 친구집에 갈 때에는 폰으로 지도도 봐야하고 방향도 봐야하고 길도 잘 둘러봐야 하기 때문에 가는 길이 도착까지 30분이 걸렸다면, 이제는 검색하거나 길을 둘러볼 필요가 없기 때문에 다시 친구네 집에 갈때 검색이나 기타 여러가지로 요소들로 소요되는 시간을 줄여 20분만에 갈 수 있게 된다는 장점이 있다.)


캐시의 일반적인 작동원리?

-> 캐시의 데이터는 일반적으로 RAM(Random Access Memory)과 같이 빠르게 액세스할 수 있는 하드웨어에 저장되고, 소프트웨어 구성 요소와 함께 사용될 수도 있다.
-> 캐시는 기본 스토리지 계층(SSD, HDD)에 액세스하여 데이터를 가져오는 더 느린 작업의 요구를 줄이고, 데이터 검색의 성능을 높인다.
-> 속도를 위해 용량을 절충하는 캐시는 일반적으로 데이터의 하위 집합을 일시적으로 저장한다.
-> 완전하고 영구적인 데이터가 있는 데이터베이스와는 대조적인점이다.


캐시의 장점들?

-> 애플리케이션 성능 개선
-> 데이터베이스 비용 절감
-> 백엔드 부하 감소
-> 예측 가능한 성능
-> 데이터베이스 핫스팟 제거
-> 읽기 처리량 증가
    ㄴ 읽기 처리량?
        - IOPS : Input/output operations per second. HDD, SSD 등의 컴퓨터 저장 장치의 성능 측정 단위


웹서비스에서 캐시가 적용되는 예제들?

-> 클라이언트에선? 
    ㄴ HTTP 캐시 헤더, 브라우저
-> 네트워크에선?
    ㄴ DNS 서버, HTTP 캐시 헤더, CDN, 리버스 프록시
-> 서버 및 데이터베이스에선?
    ㄴ 키-값 데이터 스토어(e.g. Redis), 로컬 캐시(인-메모리, 디스크)

