++++++++++++++++++++++

    Narrowing % Assertion?

    function 함수(x:number|string) {
        return x + 1;
    }

    위에처럼 함수를 짰다고 가정했을때, 리턴문에서 에러가 날것이다.
    그 이유는 전에도 설명했듯이 x는 숫자와 문자열의 조합인 전혀 새로운 타입인데,
    그 x에다가 숫자타입의 +1을 해주려고 하니 에러가 나는것이다.
    이럴때 우리는 Narrowing이라는 스킬을 사용하면 된다.

    아래와 같이 함수를 다시 짜보자.

    function 함수(x:number|string) {
        if(typeof x === "string") {
            return x + "1";
        } else {
            return x + 1;
        }
    }

    위처럼 함수를 짜게 된다면 우리가 JS에서 if로 조건문을 달아줬듯이 조건문으로 타입을 먼저 Narrowing을 해주고 그 다음 어떠한 일을 해야하는지 리턴문을 작성해주면 코드가 실행 가능하게 된다.
    Narrowing이라는 단어의 뜻처럼 타입이 number 일수도 혹은 string 일수도 있을땐,
    먼저 어떠한 타입인지 범위를 좁혀줘야 하기때문에 if조건문으로 타입을 Narrowing 해주고,
    그 다음에 코드를 써나가면 된다.

    여기서 기억해야 할 점은 if 조건문을 썼을땐 끝까지 else 나 else if 문을 써서 마무리를 지어주는게 안전하다.

    또한 Narrowing을 하는 방법은 if문만이 아니다, in 키워드나 instanceof 라는 키워드를 사용할 수도 있다.

    ~~

    Narrowing을 사용하기 어렵다 싶으면 Assertion을 사용할 수 있다.
    Assertion이라고 함은 타입을 덮어쓴다는 의미인데, 그 사용법은 아래와 같다

    function 함수(x:number|string) {
        let arr :number[] = [];
        arr[0] = x as number;
    }

    위 함수를 보면 복잡한 if문 대신 arr[0]에 x를 넣는데 원래 arr[0] = x 만 한다면 에러가 날것이다. 왜냐하면 전에 설명했듯 x는 number도 들어올 수 있고 string도 들어올 수 있는것인데, arr는 number만 들어올 수 있는 배열로 설정해줬기 때문이다.
    그래서 이때 Assertion을 사용하는것이다. arr[0] = x as number 로 하게 된다면 x를 number 타입으로 설정해주는것이기 때문에 에러 없이 코드가 실행될것이다.

    그치만 이렇게 편하게 쓸 수 있다 하더라도 아무때나 마구잡이로 사용하게 되면 회사 사수에게 빠따를 맞을 수 있다.
    그렇다면 언제 Assertion 을 써야 하나? Assertion의 용도를 잘 알고 활용해야 한다.

    우선 Assertion은 Narrowing할때 쓰는게 맞긴 하다. 
    그치만 Assertion은 위 예시 함수처럼 여러가지 타입이 될 수도 있을때 그 타입을 원하는 한가지 타입으로 설정해주는것이지 아무 타입이나 다른 타입으로 변환 시키는것이 아니다.
    간단하게 설명하자면 x:number|string 일때 x as number 이렇게 해주는건 가능하지만,
    x:string 일때 x as number 로 해주는건 에러가 난다.

    두번째로 어떤 타입이 들어올지 100% 알고 있을때, 확신할때 쓸 수 있는것이다.
    다시 예를 들면, 위 함수를 봤을때 만약 우리가 x에 들어오는 값이 숫자 타입으로 들어온다는걸 확실히 알 수 있을떄, 그때에만 Assertion을 쓸 수 있는것이지 조금이라도 다른 타입이 들어올것 같다면 그때는 Assertion을 쓰면 안된다.
    왜냐하면 만약 x:number|string 이고 함수 내부에서 arr[0] = x as number 이렇게 해준다는 가정을 했을때 만약 우리가 arr[0]에 숫자타입이 아니고 문자열 타입을 넣는다 하더라도 즉 arr[0] = "123" 이렇게 해준다 하더라도 에러를 나타내지 못하기 때문에다.
    Assertion은 말 그대로 구라로 어떠한 타입으로 씌어주세요 라는 의미이기 때문에 다른 타입이 들어오더라도 에러를 잡아내지 못한다.

    어쨌든 정리를 하자면 우리가 코드를 짤때 보통 100% 확신을 가지고 어떠한 타입이 들어온다 라고 하는 경우는 드물기 때문에 보통은 Assertion보다는 if문을 써서 코드를 많이 작성하게 된다. 정말 필요할때에만 Assertion을 사용하면 좋다.

    간단한 팁?
    TS 공부하다가 뭔가를 콘솔창에 찍어보고 싶을때에는?
    ts 파일 있는곳에서 html 파일을 하나 만들어두고, 그 안에다가 아래 내용을 붙여넣기 하고,

    /*
        <!DOCTYPE html>
        <html lang="ko">
            <head>
                <meta charset="utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"/>
                <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
                <title>Hello Javascript</title>
                
                <!-- 모바일 웹 페이지 설정 -->
                <link rel="shortcut icon" href="img/icon.png" />
                <link rel="apple-touch-icon" href="img/icon.png" />
                <!-- 모바일 웹 페이지 설정 끝 -->
                
                <!--[if lt IE 9]>
                <script src="js/html5shiv.js"></script>
                <![endif]-->
                
                <!-- javascript start -->
                <script type="text/javascript">

                </script>
                <!-- javascript end -->
            </head>

            <body>
                <h1>Hello Javascript</h1>
                <script src="index2.js"></script> 
            </body>
        </html>
    */

    안에 body태그 안에다가 <script src="index2.js"></script> 를 붙여넣는데, src 부분은 
    우리가 ts 파일을 자동으로 js 파일로 변환을 해주고 있을텐데 그 js 파일을 넣어주면 된다.

    즉 index2.ts 파일을 터미널에서 열어놓은 tsc -w 를 해주면 자동으로 index2.js 파일을 하나 만들어 주는데 바로 그 js 파일을 script에 src에다가 넣어주면 된다.
    
    그리고는 그 html 파일을 크롬으로 열어서 개발자모드를 키면 콘솔에 잘 찍히는걸 확인할 수 있다.

++++++++++++++++++++++

    전에 설명했듯이 타입도 변수에 담아서 사용할 수 있다. 아래를 확인해보자.

    type Animal :string | number | undefined;

    위와같이 Animal이라는 변수에 타입을 미리 지정해두면 다음부터 그냥 Animal만 가져다가 쓸 수 있다.
    그래서 let 동물들:Animal = "tiger" 이런식으로 타입을 가져다 쓸 수 있다.
    타입 키워드로 이렇게 변수를 만드는걸 type alias 라고 부른다.

    위 예시는 미리 지정해놓은 타입이 문자열, 숫자, 언디파인드 정도이지만 만약 객체나 배열 형식이고 안에 들어가는게 내용이 많다고 하면 미리 변수에 타입을 지정해놓는게 훨씬 더 보기 깔끔하고 좋아보인다. 가독성도 올라간다. 아래 예시를 들 수 있겠다.

    let 동물:{ name:string, etc:string, info:string } = { name:"tiger", etc:"scary", info:"becareful!" }

    이러한 코드가 있다고 했을때 동물 이라는 객체의 타입을 저렇게 같이 길게 쓰는것보단 아래처럼 미리 타입을 만들어두고 깔끔하게 코드를 작성하는게 훨씬 보기도 좋고 이해도 빨리 된다.

    type Animal:{ name:string, etc:string, info:string };
    let 동물:Animal = { name:"tiger", etc:"scary", info:"becareful!" };

    이렇게 타입을 미리 지정해놓고 변수에 할당해주면 이후에 만약 같은 객체를 다시 만들어야 할 때에도 그냥 Animal이라는 변수만 가져다가 타입으로 설정해주면 편하게 코드를 작성할 수 있다.

    그렇다면 타입을 미리 지정해놓은 변수에 할당할때 기억해야 할점은 뭐가 있을까?
    관습이라고 보면 될텐데 변수명을 대문자로 시작하게 하고 변수명뒤에 Type을 같이 써서 어떤 변수인지 헷갈리지 않게 해주는 방법도 있을 것 같다.
    그래서 위와 같은 예기로 그냥 단순히 Animal이라고 하는것보단, AnimalType이라고 하는게 훨씬 더 보기도 좋고 이해하기도 좋다.

++++++++++++++++++++++

    JS 배울때 const로 변수 선언해주고 어떠한 값을 할당하게 되면 재할당이 불가능하다고 배웠는데, 
    만약 const로 변수 선언 후 객체를 할당하게 되주면 객체 자체를 다른것으로 재할당은 안되지만,
    객체 안에 키의 값은 변경이 가능하다. 즉 아래와 같다.

    const obj = { key : 값 }
    obj.key = 새로운값

    이렇게 const로 선언했다 하더라도 객체라면 그 객체의 키의 값을 변경해줄 순 있었다.
    그치만 TS에선 객체라 하더라도 변경되지 않아야 할 값이라면 미리 타입 지정을 통해 실수로라도 변경되는 경우가 생기면 그 변경 자체를 막을 순 없지만 에러를 띄워서 알려주기라도 한다. 아래를 확인해보자.

    type 객체 = { readonly key :string };
    const obj:객체 = { key : "값" };
    obj.key = '새로운값' // 에러가 남

    위 예시를 보면 객체 라는 타입을 미리 지정해줄때 읽기 전용이라는 의미인 readonly 로 객체의 키를 지정해놨기 때문에 추후에 그 키의 값을 변경하려고 하면 에러가 나타난다. 말 그대로 읽기 전용이기 때문이다.

    type 객체 = { key? :string };
    const obj:객체 = { key : "값" };
    
    위와같이 하면 객체의 key가 값이 있을수도 있고 없을수도 있다라는 의미, 즉 key :string | undefined 라는 의미가 된다.

++++++++++++++++++++++

    타입을 미리 변수에 지정해놓은뒤 만약 여러가지 타입의 변수들이 있다면 그것들을 합쳐서 조합을 할 수도 있다.

    type Name = string;
    type Age = number;
    type Person = Name | Age;

    위의 방식대로 하는게 첫번째 합치는 방법이다.

    type PositionX = { x : number };
    type PositionY = { y : number };
    type NewType = PositionX & PositionY;
    // 이렇게 하면 NewType은 { x : number, y : number } 가 된다.

    위의 방식대로 하는게 두번째 합치는 방법.

    쉽게 이해하기 위해서 합친다는 말로 표현을 하지만 개발자라면 extend 한다 라고 표현하는게 좋다.

    주의해야 할 점은?

    어떠한 변수에 타입을 지정해놨다면 같은 이름의 변수로 재정의가 불가능하다 라는걸 기억하면 좋다.
    쉽게 설명하자면 type Name = string 이라고 한번 지정을 해놨으면 다음에 다시 type Name = number 라고 재정의 할 수는 없다.

++++++++++++++++++++++

    Literal Types?
    더 엄격한 타입 지정?

    let Name :string;
    
    이렇게 해주는게 아니라 만약 Name이라는 변수에는 "Kim" 이나 "Jung" 만 들어오게 해주고 싶다면 아래와 같이 해주면 된다.

    let Name : "Kim" | "Jung";

    이렇게 조금 더 엄격하게 타입을 지정해주는것을 Literal Type 이라고 하고 이렇게 해주면 말 그대로 "Kim" 이나 "Jung" 만 Name 이라는 변수에 담길 수 있게 된다.

    Literal Type의 장점이라 함은 변수에 어떤게 들어올지 내가 확실히 알고 제어할 수 있다는것, 또 자동완성도 되기때문에 편리하다는 장점이 있다.

    또한 Literal Type은 const 변수의 업글버전이라고 볼 수 있다. 왜냐하면,

    const 변수 = "김";
    let 변수2 : "김" | "정" | "최"

    const는 변수에 하나의 값만 할당하고 바꿀 수 없지만, Literal Type 은 여러가지를 할당할 수 있기 때문이다.

++++++++++++++++++++++

    let 자료 = { name : "kim" };

    function 함수(x :"kim") {
        return x;
    }

    함수(자료.name);

    위와 같이 해주면 함수(자료.name) 부분에 에러가 나는걸 볼 수 있을것이다.
    왜 에러가 날까? 분면 자료.name 도 "kim"이고 함수의 인자로 들어올 수 있는것도  "kim"인데 왜 에러가 나는거지? 라고 생각할 수 있지만 자세히 들여다보면 이해가 된다.

    우선 위 function 함수(x :"kim") 부분은 kim이라는 자료만 들어올 수 있습니다 라고 정의한것이 아닌 kim이라는 타입만 들어올 수 있습니다 라고 지정해준것이다. 

    근데 잘 보면 자료.name 은 "kim" 이라고 나오지만 이것의 타입이 "kim"이라는 것이 아니라 말 그대로 객체의 값이 "kim" 이라는 의미이다. 그래서 조금 더 자세히 보면 자료.name 은 "kim" 이지만 그것의 타입은 문자열이라는걸 알 수 있다.

    다시 돌아가보자면 함수의 인자인 x에 들어올 수 있는것은 값이 "kim"인것이 아니라 타입이 "kim"인것만 들어올 수 있게 해놨는데 함수(자료.name) 에서는 값이 "kim" 인것을 함수의 인자로 넣어놨으니 타입이 "kim"인게 들어와야 하는데 값이 "kim"인게 인자로 전달되다보니 에러가 나는것이다.

    그렇다면 이것은 어떻게 고칠 수 있을까? 아래와 같이 해볼 수 있겠다.

    let 자료 = { name : "kim" } as const;

    function 함수(x :"kim") {
        return x;
    }

    함수(자료.name);

    위를 보면 타입 지정 시 as const를 붙여놨는데 이것은 Literal Type 처럼 타입 지정을 해달라 라는 의미이다.
    그렇다면 정확히 as const가 하는것은 뭘까? 아래와 같다.

    첫째, 자료.name 의 타입을 문자열이 아닌 그대로 값의 타입으로 지정해준다. 즉 자료.name 는 "kim"이 되지만 이전에는 타입이 string 이었다면 as const를 붙이고 나면 타입이 그대로 "kim"이 된다.

    두번째, 자료.name 을 readonly 로 만들어준다. 즉 객체 안에 있는 모든 속성을 readonly 지정해준다.

    위 설명해줬던것처럼 as const라는 기능은 위 두가지 일을 하기때문에 처음 함수(자료.name) 를 했을때 타입이 맞지 않아 에러났던 문제가 있을 경우 as const를 해주면 이를 해결할 수 있게 된다.

++++++++++++++++++++++

    함수 타입 지정?

    이전에 함수의 타입을 지정해주려고 했을때 우리는 아래와 같이 했었다.

    function 함수(x : string) : number {

    }

    위 처럼 해주면 인자인 x로는 문자열만 들어올 수 있고 리턴되는 값은 숫자만 가능하다 라는 의미인데, 함수 타입 지정도 변수와 마찬가지로 미리 타입을 지정해놓고 가져다 쓸 수 있다. 아래의 방법과 같다.

    type 함수타입 = () => {}

    기본적인 함수 타입 미리 지정하는 방법은 위와 같은데 JS에서도 그랬듯 우리가 어떠한 함수에서 리턴해주는 줄 1개 밖에 없다면 중괄호 생략하고 썼듯이 여기서도 마찬가지다. 다시 아래를 봐보자.

    type 함수타입 = (x:string) => number

    이렇게 미리 함수의 타입을 지정해주고, 아래와 같이 가져다 쓰면 된다.

    let 새로운함수 : 함수타입 = function(x) {
        return 10
    }
    console.log(새로운함수("바보"))
    // 10 이 콘솔에 찍힐것이다.

    이렇게 해주면 그대로 함수의 타입을 가져다 새로운 함수를 만들 수 있게 된다.
    
    ~~

    객체 안에서 함수 저장?

    아래와 같이 객체 안에 함수를 저장할 수도 있다.

    let 회원정보 = {
        name: "kim",
        plusOne() {

        },
    }

    회원정보.plusOne()

    위와같이 하면 객체 안에 함수를 저장할 수 있고 또 그대로 그 함수를 객체에서 꺼내다 사용할 수 있게 된다.
    그렇다면 객체 안의 함수의 타입 지정은 어떻게 할 수 있을까? 아래와 같이 할 수 있다.

    type Member = {
        name: string,
        plusOne: (x:number) => number
    }

    let 회원정보 : Member = {
        name: "kim",
        plusOne(x) {

        }
    }

    객체 안에 있는 함수의 타입 지정도 어차피 객체 안에 있는 것이니까, 객체의 타입 지정 하듯이 미리 Member라는 타입을 하나 만들어 주고, 그 안에 plusOne 이라는 객체의 키에 타입을 (x:number) => number 이렇게 숫자만 인자로 들어올 수 있고 리턴값도 숫자만 가능하다 라고 타입 지정을 해준 뒤, 회원정보 라는 함수에 Member 타입을 적용시켜서 활용할 수 있게 된다.

++++++++++++++++++++++

    