++++++++++++++++++++++

    CORS (Cross-Origin Resource Sharing / 교차 출처 리소스 공유)

    - 서로 다른 origin 간 HTTP reqeust가 가능하도록 해주는 표준이다.
    
    그러면 origin, domain 은 뭐야?

    ㄴ 도메인(domain): naver.com
    ㄴ 오리진(origin): https://www.naver.com/PORT

    예를 들어보자면 https://domain-a.com 의 프론트엔드 JavaScript 코드가 XMLHttpRequest 혹은 Fetch API를 사용하여 https://domain-b.com/data.json 의 자원(리소스)을 요청하는 경우에 CORS 가 필요한데, 
    
    그 이유는 XMLHttpRequest와 Fetch API는 동일 출처 정책(Same-Origin Policy)을 따르기 때문이다. 즉 이 API를 사용하는 웹 애플리케이션은 자신의 출처와 동일한 출처의 리소스만 불러올 수 있다는 얘기인데, 
    
    위 예시를 보면 domain-a.com 에서 domain-b.com/data.json 으로 요청을 보내고 있기 때문에 이러한 경우 origin 과 domain 모두 서로 다르기 때문에 CORS 가 필요한 경우이다.

++++++++++++++++++++++

    자 그러면 이제 면접보러 가서 cors에 대해서 설명해주세요 라고 한다면 어떻게 대답하면 좋을까?

    - CORS는 Cross-Origin Resource Sharing의 약자로, 교차 출처 리소스 공유를 뜻합니다.
    교차 출처 리소스 공유라 함은 한 도메인(오리진)에서 다른 도메인(오리진)으로 어떠한 리소스(자원)에 대한 요청(접근)을 하려 할 때에, XMLHttpRequest와 Fetch API 호출 같은 경우 동일 출처 정책(Same-Origin Policy)을 따르기 때문에 서로 다른 도메인(오리진)인 경우 이러한 요청들은 제한이 됩니다. 그렇기 때문에 이러한 경우엔 CORS를 활용해서 서로 다른 도메인(오리진)인 경우에도 요청과 응답이 원활하게 잘 이뤄질 수 있도록, 그래서 필요한 리소스(자원)에 문제없이 접근할 수 있도록 허가해줄 수 있도록 하는것이 CORS 입니다.

++++++++++++++++++++++

    그냥 조금 더 이해하기 쉽게 설명하자면, 
    우리가 친구의 물건을 쓰려고 할 때에 그 친구가 제한하는 규약안에서만 사용해야 하듯, 
    다른 도메인의 자원을 쓰려면 한다면 그 자원의 주인이 허락한 규약을 지켜야 하는 것이라고 보면 된다.

    예를 들어 파이널 프로젝트에서 Touch 서버만들때 app.js에서 cors 설정을 아래와 같이 해줬던것처럼,

    app.use(cors(
        {
            origin: true,
            credentials: true,
        })
    )

    만약 서로 다른 도메인(오리진)에 대한 요청이 들어왔을 경우, 어떠한 경우에만 그러한 요청들을 허가해준다 라고하는 조건을 만들어준거라 생각하면 이해하기가 조금 쉬워진다.
    
++++++++++++++++++++++

    그렇다면 동일 출처 정책(Same-Origin Policy)은 뭐야?

        동일 출처 정책(same-origin policy)은 어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식입니다. 동일 출처 정책은 잠재적으로 해로울 수 있는 문서를 분리해, 공격받을 수 있는 경로를 줄입니다.
        (출처 MDN)

        즉, 동일 출처 정책은 웹 브라우저 보안을 위해 프로토콜, 호스트, 포트가 동일한 서버로만 ajax(Asynchronous Javascript And XML) 요청을 주고 받을 수 있도록 한 정책이다.

    ajax 란?

        AJAX란, JavaScript의 라이브러리중 하나이며 Asynchronous Javascript And Xml(비동기식 자바스크립트와 xml)의 약자이다. 브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부만을 위한 데이터를 로드하는 기법 이며 JavaScript를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술이다.
        즉, 쉽게 말하자면 자바스크립트를 통해서 서버에 데이터를 요청하는 것이다.

++++++++++++++++++++++
