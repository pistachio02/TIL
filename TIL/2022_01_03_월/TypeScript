++++++++++++++++++++++

    타입스크립트란 ?
    ㄴ 자바스크립트 + Type 문법.
    ㄴ 즉 자바스크립트 업글 버전.

    자바스크립트는 Dynamic Typing이 가능.
    ㄴ 5 - '3' 
    ㄴ 원래는 숫자 - 숫자 만 가능하지만 JS가 알아서 숫자로 바꿔줌.
    ㄴ 위 기능을 Dynamic Typing이라고 함.
    ㄴ 편리하지만 프젝 사이즈가 커질수록 단점이 됨.
    ㄴ 자유도, 유연성은 오히려 프젝 사이즈가 커질수록 쓰레기임.

    타입스크립트의 장점 ?
    ㄴ 에러메세지의 정확성이 개꿀.

    팁?
    ㄴ ts 파일은 js랑 똑같이 사용가능하다.
    ㄴ 다만 웹브라우저는 ts 파일을 알아듣지 못하기 때문에js 파일로 변환 작업을 해야한다.
    ㄴ js 파일로 변환하려면 Terminal 새로열어서 tsc -w 를 입력해주고 터미널 닫지 말고 그대로 두면 ts 파일을 알아서 자동으로 js 파일로 변환해준다.

++++++++++++++++++++++

    let 이름 :string = "Jung";

    위처럼 타입을 좀 더 정확하게 지정해줄 수 있는데,
    타입으로는 string, number, boolean, null, undefined, bigint, [], {} 등이 있다.

    배열이나 객체는 아래와 같이 해줄 수 있다.

    let 이름 :string[] = ["Jung", "Kim"];

    위 [] 앞에 string 이라고 해준 이유는 배열 안에 string 만이 들어갈 수 있다는 뜻이다.

    let 이름 :{ name : string } = { name : "Jung"};

    위는 객체를 만들어줄때 사용하는 방법.

    ~~

    let 이름 :string | number = 123;

    위처럼 string 이나 number 가 들어올 수도 있다 라고 해줄 수 있다.
    이를 Union Type 이라고 한다.

    ~~

    type 내가지정한타입 :string | number;
    let 이름 :내가지정한타입 = 123;

    위처럼 내가 미리 지정해놓은 타입을 가져다 사용할 수도 있다.
    보통 영어 대문자로 시작하는 단어로 작명을 한다.

    ~~

    function 함수(x) {
        return x * 2
    };
    
    위와같이 함수가 있을때에도 타입 지정이 가능하다.
    아래와 같이 하면 된다.

    function 함수(x :number) {
        return x * 2
    };

    return 값의 타입을 지정해주려면 아래와 같이 할 수 있다.

    function 함수(x :number) :number {
        return x * 2
    };

    위 함수처럼 해주면, 인자로 무조건 숫자, return 값도 무조건 숫자가 되어야 한다 라는 뜻이 된다.

    ~~

    배열 타입을 만들때 배열 안에 담기는 값이 어떤 자리에는 꼭 이러한 타입이 되어야 한다 라는 조건이 있어야 한다면 아래와 같이 해주면 된다.

    type Member = [number, boolean];
    let jung :Member = [123, true];

    위를 보면 Member 로 미리 지정해놓은 타입의 첫번째가 숫자 두번째가 불리언 타입으로 지정되어있는데,
    jung 이라는 배열을 만들때에도 그 배열의 첫번째는 무조건 숫자, 두번째는 무조건 불리언타입이 되어야 한다는 의미이다.
    그래서 만약 [123, true] 가 아니라 ["123", true] 가 되면 에러를 나타낸다.

    ~~

    객체 타입을 만들때에도 조금 더 자세히 타입 관련 설정을 해줄 수 있다.

    type Member = {
        name :string
    }
    let jung :Member = {
        name: "Jung"
    }

    위처럼 설정을 해주면 타입을 name 이라는 키에 string 타입의 값만 담길 수 있다 라는 의미라
    무조건 { name: "Kim" }, { name: "Park" } 이렇게만 객체를 만들 수 있게 된다.
    
    근데 만약 키로 name 뿐만이 아니라 age 나 그 외 다른 키를 넣고 싶다면 아래와 같이 할 수 있다.

    type Member = {
        [key :string] :string | number
    }
    let jung :Member = {
        name: "Jung",
        age: 31,
    }

    위처럼 설정을 해주면 객체의 키를 string 타입으로 된 모든 키를 가질 수 있다 라는 의미가 되기 때문에
    키를 name 이나 age 로 해주더라도 에러가 나지 않고 마찬가지로 값으로 string 타입이나 number 타입으로 해주더라도 에러가 나지 않는다.

++++++++++++++++++++++

    tsconfig.js 의 대한것?
    ㄴ 타입스크립트 ts 파일들을 .js 파일로 변환할 때 어떻게 변환할 것인지 세부설정을 해주는곳이다.

    보통 설정을 아래와 같이 해준다.

    {
        "compilerOptions": {
            "target": "es5",
            "module": "commonjs",
        }
    }

    target은 타입스크립트 파일을 어떤 버전의 자바스크립트로 바꿔줄지 설정해주는 부분이고,
    es5로 셋팅해놓으면 es5 버전 자바스크립트로 컴파일(변환) 해준다.

    module은 자바스크립트 파일간 import 문법을 구현할 때 어떤 문법을 쓸지 정하는 부분이다.
    commonjs는 require 문법, es2015나 esnext는 import 문법을 사용한다.

    아래는 추가 팁

    {
        "compilerOptions": {
            "target": "es5", // 'es3', 'es5', 'es2015', 'es2016', 'es2017','es2018', 'esnext' 가능
            "module": "commonjs", //무슨 import 문법 쓸건지 'commonjs', 'amd', 'es2015', 'esnext'
            "allowJs": true, // js 파일들 ts에서 import해서 쓸 수 있는지 
            "checkJs": true, // 일반 js 파일에서도 에러체크 여부 
            "jsx": "preserve", // tsx 파일을 jsx로 어떻게 컴파일할 것인지 'preserve', 'react-native', 'react'
            "declaration": true, //컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일)
            "outFile": "./", //모든 ts파일을 js파일 하나로 컴파일해줌 (module이 none, amd, system일 때만 가능)
            "outDir": "./", //js파일 아웃풋 경로바꾸기
            "rootDir": "./", //루트경로 바꾸기 (js 파일 아웃풋 경로에 영향줌)
            "removeComments": true, //컴파일시 주석제거 

            "strict": true, //strict 관련, noimplicit 어쩌구 관련 모드 전부 켜기
            "noImplicitAny": true, //any타입 금지 여부
            "strictNullChecks": true, //null, undefined 타입에 이상한 짓 할시 에러내기 
            "strictFunctionTypes": true, //함수파라미터 타입체크 강하게 
            "strictPropertyInitialization": true, //class constructor 작성시 타입체크 강하게
            "noImplicitThis": true, //this 키워드가 any 타입일 경우 에러내기
            "alwaysStrict": true, //자바스크립트 "use strict" 모드 켜기

            "noUnusedLocals": true, //쓰지않는 지역변수 있으면 에러내기
            "noUnusedParameters": true, //쓰지않는 파라미터 있으면 에러내기
            "noImplicitReturns": true, //함수에서 return 빼먹으면 에러내기 
            "noFallthroughCasesInSwitch": true, //switch문 이상하면 에러내기 
        }
    }

++++++++++++++++++++++

    기억해야 할점?
    ㄴ 전체에 다 타입 지정을 해줄 필요는 없다.
    ㄴ 변수 생성 시 타입스크립트가 타입을 자동으로 부여해주니까.

++++++++++++++++++++++

    let 이름: any;

    위처럼 하면 모든 타입이 다 들어와도 된다 라는 의미로, 타입스크립트를 쓰는 의미가 없어짐.
    그냥 자바스크립트로 해도 되기때문.
    그렇기 때문에 any 는 아무때나 쓰는게 아니라 만약 타입스크립트의 기능이 필요 없다 하는 때에만 any를 써준다.
    
    근데 만약 그런 경우가 온다면 any 보다는 unknown 이 더 유용하다.
    any랑 비슷한데, unknown을 추천하는 이유는 조금 더 안전하기 때문이다.

    더 안전한 이유는 아래에 있다.

    let 이름 :any
    이름 = 123

    let 변수1 :string = 이름

    any 타입은 말 그대로 쉴드 해제이기때문에 변수1에는 string 타입만 들어와야 하지만 string 타입이 아닌 이름 이 들어가게 되더라도 에러를 나타내지 않게 된다. 
    그치만 아래와 같이 unknown으로 했을땐,

    let 이름 :unknown
    이름 = 123

    let 변수1 :string = 이름

    위와같이 unknown으로 하게 되면 string 타입이 아니기때문에 변수1에 이름을 넣으려 할때 에러를 나타낸다.

    이러한 이유로 any 보다는 unknown 을 쓰기를 더 추천한다.

++++++++++++++++++++++

    함수의 타입을 지정할때 만약 리턴하는게 없고 실수로라도 무언가 리턴되었다면 에러를 나타내달라 라고 지정할 수 있는 타입이 void 이다. 아래와 같이 사용하면 된다.

    function 함수(x:number) {
        1+1
    }

    위처럼만 해도 리턴시키는것 없는 함수가 되고, 인자로 전달된 x 의 타입은 숫자만 가능하다 라는 의미인데
    만약 조금 더 엄격하게 함수의 타입을 만들어주고싶다면 아래와 같이 하면 된다.

    function 함수(x:number) :void {
        1+1
    }

    이렇게 해주면 실수로 뭔가 리턴 되었을때 에러가 나타난다.

    ~~

    만약 인자가 옵션일 경우에는 아래와 같이 해주면 된다.

    function 함수(x?:number) :void {
        1+1
    }

    ?(물음표)를 해주면 옵션이라는 의미로 만약 ?를 안해주면 함수를 만들었을때 필수로 인자가 있어야 한다는 의미가 된다.
    만약 함수를 호출할때 인자가 없으면 에러가 나게 된다.
    그러므로 옵션으로 지정해주고 싶은것이 있을땐 타입에 ?를 붙여주면 된다.
    한가지 잊지 말아야 할 점은 만약 ?를 붙이게 된다면 그것은 곧 x?:number === x:number | undefined 라는 의미가 된다.

++++++++++++++++++++++
