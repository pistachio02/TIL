<TIL>

Toy23번

문제
-> 2차원 M x N 배열을 나선형(spiral)으로 순회해야 합니다.

인자 : matrix
-> 세로 길이(matrix.length)가 M, 가로 길이(matrix[i].length)가 N인 2차원 배열
-> matrix[i]는 string 타입을 요소로 갖는 배열
-> matrix[i][j].length는 1

출력
-> string 타입을 리턴해야 합니다.

주의사항
-> 순회는 좌측 상단 (0,0)에서 시작합니다.
-> 배열의 모든 요소를 순서대로 이어붙인 문자열을 리턴해야 합니다.

입출력 예시
⬇️⬇️⬇️⬇️⬇️⬇️

예시 1).

let matrix = [
  ['A', 'B', 'C'],
  ['D', 'E', 'F'],
  ['G', 'H', 'I'],
];
let output = spiralTraversal(matrix);
console.log(output); // --> 'ABCFIHGDE'

예시 2).

matrix = [
  ['T', 'y', 'r', 'i'],
  ['i', 's', 't', 'o'],
  ['n', 'r', 'e', 'n'],
  ['n', 'a', 'L', ' '],
];
output = spiralTraversal(matrix);
console.log(output); // --> 'Tyrion Lannister'

// matrix라는 2차원 배열이 인자로 전달 되었을때, spiralTraversal(matrix) 함수를 실행시키면 문자열을 리턴해야하고,
// 그 문자열에는 2차원 배열의 [0, 0] 자리의 값부터 나선형으로 쭉 회전해가며 모든 값들을 다 담아야 한다.


문제 풀이
⬇️⬇️⬇️⬇️⬇️

const spiralTraversal = function (matrix) {
  // TODO: 여기에 코드를 작성합니다.

  const right = [0, 1]; // 오른쪽으로 한칸 이동
  const down = [1, 0]; // 아래로 한칸 이동
  const left = [0, -1]; // 왼쪽으로 한칸 이동
  const up = [-1, 0]; // 위로 한칸 이동
  
  const MOVES = [right, down, left, up];
  const M = matrix.length;
  const N = matrix[0].length;
  const isValid = (row, col) => row >= 0 && row < M && col >= 0 && col < N; // matrix를 벋어나지 않았는지 isValid를 통해 확인하기, 

  let count = 0; // 카운트 세기 위해서, while조건문 시 사용
  let row = 0, col = -1;  // 제일 처음 시작을 [0, 0] 에서 시작해야하는데 right는 [0, 1] 이니까 col을 -1로 해준다. 그래야 right을 적용했을때 row 나 col이 [0, 0] 이 되고 거기서부터 시작하기때문에
  let direction = 0; // MOVES의 0번째 인덱스인 right 부터 적용하기때문에 right, down, left, up을 순차적으로 실행하기 위해 우선 0으로 할당해준다.
  let result = ""; // 리턴시 사용할 result라는 빈문자열을 선언해준다.
  
  while(count < M*N) { // count가 더 넘지 않을때까지만 while반복문을 실행해주고,
    const move = MOVES[direction]; // move는 [0, 1]이 되고,
    const [rd, cd] = move; // rd는 0, cd는 1이 된다,

    row = row + rd; // row의 초기값이 0이었고, rd(0)을 더한값을 row에 다시 할당해주기 때문에 row는 0이 된다.
    col = col + cd; // col의 초기값이 -1이었고, cd(1)을 더한값을 col에 다시 할당해주기 때문에 col는 0이 된다.
    
    while(isValid(row, col) && matrix[row][col] !== false) { // isValid로 matrix를 벗어나는지 여부를 확인하고, 여기 while 반복문 안에서 한번 얻은 값들은 다 false로 바꿔줄거기때문에 방문한 값이 false가 아닌지도 확인해준다,
      result = result + matrix[row][col]; // 방문한 값을 result의 초기값 빈문자열에 답아주고,
      matrix[row][col] = false; // 방문한 값을 false로 바꿔주고,
      row = row + rd; // row, col각각 다 0이었기때문에 각각에다가 rd(0), cd(1)을 더해준 값을 각각에다가 다시 할당해주고, (그러면 row가 0 col이 1이 되어 오른쪽으로 한칸 이동이 가능)
      col = col + cd;
      count++; // 카운트를 하나씩 올려준다.
    }
    // 오른쪽으로 쭉 이동 중 만약 row col이 행렬에서 벗어나게 되면 위의 while 반복문을 벗어나 아래로 빠져나오게 되는데
    row = row - rd; // row col이 행렬에서 벗어났기때문에 while반복문에서 벗어나게 되면 우선 원 위치로 돌아가기 위해 row - rd, col - cd한 값을 각각에다가 다시 할당해주고,
    col = col - cd;

    direction = (direction + 1) % 4; // direction의 초기값이 0이어서 right을 사용했었는데 이제 행렬에서 벗어났기때문에 down을 사용하기 위해 direction +1을 해준다,
  }
  
  return result; // 쭉 돌고 돌아 모든 matrix의 값이 result에 할당되었고 그것을 리턴 시켜준다.

};
