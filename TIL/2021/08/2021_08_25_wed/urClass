Algorithm with Math.

순열? (Permutation?)
-> 모든 경우의 수를 계산하는 알고리즘.
-> 순서 있는 n개에 대한 모든 경우의 수를 구하는 것.

예). 배열 [1, 2, 3]이 주어졌을때 가능한 모든 경우의 수는 아래⬇️⬇️가 된다.

    [
        [1, 2, 3], 
        [1, 3, 2], 
        [2, 1, 3], 
        [2, 3, 1], 
        [3, 1, 2], 
        [3, 2, 1]
    ];

조합? (Combination?)
-> 직관적이고 간단하게 설명하자면, 순서가 중요하지 않은(순서를 고려하지 않은) 순열이라고 생각하면 된다.

예). 위처럼 배열 [1, 2, 3]이 주어졌을때 순열은 배열안에 오는 요소의 순서를 고려하기 때문에 [1, 2, 3] 과 [1, 3, 2]이 같은거라고 보지 않지만, 조합에서는 순서를 고려하지 않기때문에 위의 2차원배열 순열은 다 동일한것으로 본다. 그래서 [1, 2, 3]의 조합은 [1, 2, 3]밖에 없다. 순서를 고려하지 않기때문에.

Tip!!
⬇️⬇️⬇️⬇️

-> 약수: 어떤 수를 나누어떨어지게 하는 수
-> 배수: 어떤 수의 1, 2, 3, ...n 배하여 얻는 수
-> 공약수: 둘 이상의 수의 공통인 약수
-> 공배수: 둘 이상의 수의 공통인 배수
-> 최대 공약수(GCD. Greatest Common Divisor): 둘 이상의 공약수 중에서 최대인 수 
    // 예). 두개의 수가 있을때 두개의 수의 공약수들 중 최대인 수.
        // 6의 약수 : [1, 2, 3, 6]
        // 9의 약수: [1, 3, 9]
        // 6과 9의 공약수 : [1, 3]
        // 6과 9의 최대공약수 : [3]
-> 최소 공배수(LCM. Least Common Multiple): 둘 이상의 공배수 중에서 최소인 수
    // 예). 두개의 수가 있을때 두개의 수의 공배수들 중 최소인 수.
        // 5의 배수 : [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100...]
        // 6의 배수 : [6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 90, 120, ...]
        // 5와 6의 공배수 : [30, 60, 90, ...]
        // 5와 6의 최소공배수 : [30]

-> 멱집합?
    ㄴ 집합 {1, 2, 3}의 모든 부분집합은 {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3} 으로 나열할 수 있고, 이 부분집합의 총 개수는 8개이다. 그리고 이 모든 부분집합을 통틀어 멱집합이라고 한다. 이렇게 어떤 집합이 있을 때, 이 집합의 모든 부분집합을 멱집합 이라고 한다. 

