<TIL>

Toy26번

문제
-> 정수를 요소로 갖는 배열을 입력받아 다음의 조건을 만족하는 LSCS*를 리턴해야 합니다.
-> LSCS: 주어진 배열의 연속된 부분 배열*의 합을 구한다고 할 때, 이 중 가장 큰 값(Largest Sum of Contiguous Subarray)
-> 연속된 부분 배열들: 배열 [1,2,3]의 연속 부분 배열은 [1], [1, 2], [1, 2, 3], [2], [2, 3], [3] 입니다.


인자 1 : arr
-> number 타입을 요소로 갖는 배열
-> arr.length는 60,000 이하
-> arr[i]는 -100,000 이상 100,000 이하의 정수

출력
-> number 타입을 리턴해야 합니다.

주의사항
-> 배열의 모든 요소가 음수인 경우도 있습니다.

입출력 예시
⬇️⬇️⬇️⬇️⬇️⬇️

let output = LSCS([1, 2, 3]);
console.log(output); // --> 6

output = LSCS([1, 2, 3, -4]);
console.log(output); // --> 6 ([1, 2, 3])

LSCS([1, 2, 3, -4, 5]);
console.log(output); // --> 7 ([1, 2, 3, -4, 5])

LSCS([10, -11, 11]);
console.log(output); // --> 11 ([11])

// 단순히 모든 요소를 다 더하는게 해결책이 아니다, 중간에 0보다 낮은 수가 있을 수 있기에, 또 배열의 모든 요소들이 0보다 작은 수 일 수 있으니.
// 아래의 문제 풀이를 보면 이해가 되겠지만, max를 -100000으로 정해주고 max에다가 요소들을 더한 값을 순차적으로 할당해줄텐데, 만약 max보다 순차적으로 더해간 값이 더 낮다면(더한 값이 음수, 0보다 낮은 수라면) 그때는 그냥 패스해서 max에 재할당하지 않고 지나가야하기 때문에 max에 재할당 하는 경우를 조건문으로 단서를 달아준다. 최종적으로 배열의 순회가 끝나면 max를 리턴하게 된다.

문제 풀이 1 , 시간복잡도 O(N)
⬇️⬇️⬇️⬇️⬇️

const LSCS = function (arr) {
  //TODO: 여기에 코드를 작성합니다.
  let max = -1000000 // 인자1:arr의 조건에 arr[i]는 -100000이상이라고 했으니 그보다 낮을 순 없기때문에 max에다가 -100000을 할당해준다. (나중에 이것을 리턴해야함)
  let sum = 0; // sum은 말그대로 arr의 모든 요소들을 더하고 그 값을 할당해줄거라 sum에 0을 할당해준다.
  for(let i = 0; i < arr.length; i++) { // for반복문을 통해 arr의 모든 소요들을 순회할거고,
    sum = sum + arr[i]; // 순회하면서 모든 요소들을 더한 값을 sum에 할당 할 것,
    if(sum > max) { // sum에 값이 할당되면 그 값이 max(-100000) 보다 클 시
      max = sum; // max에 sum의 값을 다시 할당해주고,
    }
    if(sum < 0) { // sum의 값이 0보다 작을 시 
      sum = 0; // sum을 다시 0으로 초기화 시킨다.
    }
  }
  return max; // 반복문 순회를 마치고 max를 리턴하게 되면 연속 부분 배열의 합 중 가장 큰 값을 리턴할 수 있다.
};


문제 풀이 2 , 시간복잡도 O(N)
⬇️⬇️⬇️⬇️⬇️

const LSCS = function (arr) {
  let subArrSum = arr[0];
  let max = arr[0]; // 정답의 후보를 저장
  for(let i = 1; i < arr.length; i++) {
    // subArrSum는 바로 직전의 요소까지 검토했을 때 가장 큰 연속합
    // 연속합에 추가로 검토하는 요소, 즉 arr[i]를 더하는 것보다
    // arr[i] 하나의 값이 더 큰 경우 (subArrSum가 음수일 경우)
    // subArrSum를 버리는 게 좋다.
    // 쭉 더해서 음수인 부분은 굳이 더할 필요가 없다.
    subArrSum = Math.max(subArrSum + arr[i], arr[i]);
    max = Math.max(max, subArrSum);
  }

  return max;
};
