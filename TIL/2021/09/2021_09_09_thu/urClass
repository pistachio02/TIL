<컴공 기초>

-문자열!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-

유니코드?
-> 유니코드(Unicode)는 유니코드 협회(Unicode Consortium)가 제정하는 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준이다.
    ㄴ 이 표준에는 ISO 10646 문자 집합, 문자 인코딩, 문자 정보 데이터베이스, 문자를 다루기 위한 알고리즘 등을 포함하고 있다.


인코딩(부호화)이란?
-> 어떤 문자나 기호를 컴퓨터가 이용할 수 있는 신호로 만드는 것이다.
-> 신호를 입력하는 인코딩과 문자를 해독하는 디코딩을 하기 위해서는 미리 정해진 기준을 바탕으로 입력과 해독이 처리되어야 한다.
-> 이러한 인코딩과 디코딩의 기준을 문자열 세트 또는 문자셋(charset)이라고 한다.
-> 이 문자셋의 국제 표준이 유니코드이다.


결국 종합해보자면, 
인코딩이란 어떠한 문자나 기호를 컴퓨터가 알아먹을 수 있고 이용할 수 있는 신호로 만드는것인데,
이때 신호를 입력하는것을 인코딩, 문자를 해독하는것을 디코딩이라고 한다. 
인코딩과 디코딩을 하기 위해선 어떤 정해진 기준이 있어야 하고 그 기준을 바탕으로 입력과 해독이 처리되어야 하는데,
이 기준을 (인코딩과 디코딩의 기준)을 문자열, 또는 문자셋(charset)이라고 한다.
그리고 그 문자열, 혹은 문자셋(charset)의 국제 표준을 유니코드라 한다.


ASCII 문자?
-> 영문 알파벳을 사용하는 대표적인 문자 인코딩으로 7 비트로 모든 영어 알파벳을 표현할 수 있다. 
-> 52개의 영문 알파벳 대소문자와, 10개의 숫자, 32개의 특수 문자, 그리고 하나의 공백 문자를 포함한다.
-> 유니코드는 ASCII를 확장한 형태입니다.


UTF-8과 UTF-16의 차이점?
-> UTF-8과 UTF-16은 인코딩 방식의 차이를 의미한다.
-> UTF-8은 Universal Coded Character Set + Transformation Format – 8 bit의 약자로, UTF- 뒤에 등장하는 숫자는 비트(bit)이다.


UTF-8 특징? : 가변 길이 인코딩
-> UTF-8은 유니코드 한 문자를 나타내기 위해 1 byte(= 8 bits) 에서 4 bytes까지 사용한다.
-> UTF-8은 1 byte에서 4 bytes까지의 가변 길이를 가지는 인코딩 방식이다.
-> 네트워크를 통해 전송되는 텍스트는 주로 UTF-8로 인코딩된다.
-> 사용된 문자에 따라 더 작은 크기의 문자열을 표현할 수 있기 때문이다.
-> UTF-8은 ASCII 코드의 경우 1 byte, 크게 영어 외 글자는 2byte, 3byte, 보조 글자는 4byte를 차지한다.
-> 이모지는 보조 글자에 해당하기 때문에 4byte가 필요하다.

UTF-8 특징? : 바이트 순서가 고정됨
-> UTF-16에 비해 바이트 순서를 따지지 않고, 순서가 정해져 있다.

UTF-16 특징? : 코드 그대로 바이트로 표현 가능, 바이트 순서가 다양함
-> UTF-16은 유니코드 코드 대부분(U+0000부터 U+FFFF; BMP) 을 16 bits로 표현한다.
    ㄴ 대부분에 속하지 않는 기타문자는 32 bit(4 bytes)로 표현하므로 UTF-16도 가변 길이라고 할 수 있으나, 대부분은 2 바이트로 표현한다.

-> UTF-8에서는 한글은 3 바이트, UTF-16에서는 2 바이트를 차지한다.


-그래픽!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-

비트맵(래스터)(PNG) 이미지와 벡터(SVG) 이미지?

우선 비트맵(래스터)?

-> 픽셀 기반 기술이다.
-> 사진과 같이 색상의 조합이 다양한 이미지에 적합한것이 특징이다.
-> 확대에 적합하지 않고, 보다 큰 사이즈의 이미지가 필요할 때 사용하려는 크기 이상으로 생성하거나 스캔해야한다.
-> 큰 크기의 이미지는 큰 파일 사이즈를 가지게 된다.
-> 이미지의 복잡도에 따라 벡터로 변환하는것에 오랜 시간이 걸린다.
-> 대표적인 파일 포맷으로는 jpg, gif, png, bmp, psd 등이 있다.
-> 웹에서는 보톤 jpg, gif, png 등이 널리 쓰이고 있다.

그 다음 벡터?

-> 수학적으로 계산된 shape기반 기술이다.
-> 로고, 일러스트와 같이 제품에 적용되는 이미지에 적합한것이 특징이다.
-> 품질의 저하 없이 모든 크기로 확대 가능하고, 또 해상도의 영향을 받지 않는다.
-> 큰 크기의 벡터 그래픽은 작은 파일 사이즈를 유지할 수 있다.
-> 쉽게 래스터 이미지로 변환이 가능하다.
-> 대표적인 파일 포맷으로는 svg, ai 등이 있다.
-> 현대의 대부분의 브라우저에서 svg 포맷을 지원하고 있다.


--------------------------------------------------------------


<운영체제>

운영체제?
-> 컴퓨터나 스마트폰의 기기 그 자체(하드웨어)는 스스로 할 수 있는 일이 없다.
-> 그래서 누군가가 걔들한테 일을 시켜야 하는데, 하드웨어의 설계를 바탕으로 하드웨어에게 일을 시키는 주체가 바로 운영체제이다.

-> 응용 프로그램의 목적은 컴퓨터를 이용해 다양한 작업을 하는것인데, 여기서 운영체제가 응용 프로그램이 하드웨어에게 일을 시킬 수 있도록 도와준다. 그렇기 때문에 운영체제가 없으면 응용 프로그램도 실행될 수 없다.

-> 하드웨어를 구성하는 일을 하는 CPU(프로세스 관리), 자료를 저장하는 RAM(메모리 관리), 디스크 등의 시스템 자원을 관리(I/O 입출력 및 디스크 네트워크 관리)하는 주체가 바로 운영체제이다.

-> 모든 응용 프로그램이 시스템의 자원을 마음대로 사용 할 수 있다면 해커에 의한 공격에 무방비한 상태가 된다.
-> 그렇기에 응용 프로그램은 권한에 대한 관리가 필요하다.
-> 또한 여러 사람이 하나의 기기를 사용하는 경우에도 사용자를 관리하는일이 필요한데 이는 매우 중요하다.
(응용 프로그램이 실행되고, 시스템 자원을 사용할 수 있도록 권한과 사용자를 관리한다.)


-> 위에서 설명한바에 따르면 운영체제가 응용 프로그램이 하드웨어에게 일을 시키는것을 도와준다고 하는데,
-> 이를 바꿔서 말하면 응용 프로그램은 운영체제를 통해 컴퓨터에게 일을 시키는것을 의미한다.

-> 응용 프로그램이 운영체제를 통해 컴퓨터에게 일을 시키려면, 컴퓨터를 조작할 수 있는 권한을 운영체제로부터 부여받아야 한다. 
-> 권한을 부여받고 난 후에는, 운영체제가 제공하는 기능을 이용할 수 있게 된다.
-> 응용 프로그램이 운영체제와 소통하기 위해서는, 운영체제가 응용 프로그램을 위해 인터페이스(API)를 제공해야 한다.
-> 응용 프로그램이 시스템 자원을 사용할 수 있도록, 운영체제 차원에서 다양한 함수를 제공하는 것을 시스템 콜(System call)이라고 부른다.





프로세스?
-> 운영체제에서는 실행 중인 하나의 애플리케이션을 프로세스라고 부른다. 
-> 사용자가 애플리케이션을 실행하면, 운영체제로부터 실행에 필요한 메모리를 할당 받아 애플리케이션의 코드를 실행하게 되는데 이때 실행되는 애플리케이션을 프로세스라고 부른다. 
-> 예를 들어 Chrome 브라우저를 두 개 실행하면, 두 개의 프로세스가 생성되는데 이처럼 하나의 애플리케이션은 여러개의 프로세스(다중 프로세스)를 만들기도 한다.


스레드(Thread)?
-> 스레드는 사전적 의미로 한 가닥의 실이라는 뜻이다. 
-> 한 가지 작업을 실행하기 위해 순차적으로 실행한 코드를 실처럼 이어 놓았다고 해서 유래된 이름이다. 
-> 하나의 스레드는 코드가 실행되는 하나의 흐름이기 때문에, 한 프로세스 내에서 두 개의 스레드가 있다면 코드가 실행되는 흐름이 두 개 생긴다는 의미이다.


멀티 스레드(Multi-Thread)?
-> 멀티 태스킹은 두 가지 이상의 작업을 동시에 처리하는 것을 의미한다. 
-> 운영체제는 멀티 태스킹을 할 수 있도록, 프로세스마다 CPU 및 메모리 자원을 적절히 할당하고 병렬로 실행한다.
-> 멀티 태스킹이 꼭 멀티 프로세스를 의미하는 것은 아니다.
-> 하나의 프로세스 내에서 멀티 태스킹을 할 수 있도록 만들어진 애플리케이션도 있다.
-> 하나의 프로세스가 두가지 이상의 여러개의 작업을 처리할 수 있는 이유는 멀티 스레드 덕분이다.

-> 멀티 프로세스가 애플리케이션 단위의 멀티 태스킹이라면, 멀티 스레드는 애플리케이션 내부에서의 멀티 태스킹이라고 할 수 있다.
(멀티 태스킹이라고 해서 꼭 여러개의 프로세스를 의미하는것이 아니다. 왜냐면 하나의 프로세스를 통해 멀티 스레드로 여러가지 다양한 작업이 가능하기 때문이다.)

-> 최대한 이해할 수 있게 설명해 보자면, 나한테 프로세스라고 하는 로봇이 3개 있다고 치자
(프로세스1=로봇1, 프로세스2=로봇2, 프로세스3=로봇3)
-> 주말에 집에서 널부러져 있는데 갑자기 집에 손님이 온다는 연락을 받았다.
-> 청소기도 돌려야하고, 설거지도 해야 하고, 창문 열어 환기도 시켜야 하는데, 시간이 얼마 없어서 나 혼자서 하나씩 차근차근 할 수 가 없다.
-> 이때 위 3가지 일을 한번에 동시에 하려면 프로세스 1,2,3 에게 각각 일을 하나씩 시키면 된다.
-> 프로세스 1,2,3이 3가지 일을 각각 하나씩 배정받아 처리하는것을 멀티 태스킹이라고 하는데,
-> 그런데 꼭 프로세스 1,2,3이 각각 하나씩 일을 배정받아 할 필요가 없을 때도 있다. 왜?
-> 내가 가진 프로세스 1은 멀티 스레드를 할 수 있는 존나 강력한 슈퍼 프로세스니까. 
-> 이처럼 프로세스 1만으로도 동시에 3가지를 다 할 수 있다면? 굳이 프로세스 2,3 한테까지 일을 시킬 필요가 없다.
-> 존나 강력한 프로세스 1이 멀티 스레드를 사용해서 혼자서 위에 말했던 3가지 일을 한번에 동시에 처리하는것도 멀티 태스킹이라고 할 수 있다.


스레드의 특징?
-> 프로세스 내에서 실행되는 흐름의 단위이다.
-> 각 스레드마다 call stack이 존재한다.
(call stack: 실행중인 서브루틴을 저장하는 자료 구조)
-> 스레드는 다른 스레드와 독립적으로 동작한다.

멀티 스레딩의 장점?
-> 프로세스를 이용하여 동시에 처리하던 일을 스레드로 구현할 경우, 메모리 공간과 시스템 자원의 소모가 줄어든다.
(위 예시로 얘기를 하자면 프로세스 2, 3한테 굳이 일을 시키지 않아도 되기 때문에 로봇을 3개 다 쓰지 않아도 된다는 의미이다. 로봇을 3개 쓰지 않고 1개만 써서 3가지의 일을 할 수 있다면? 나중에 로봇 3개를 충전하는 대신 로봇 1개만 충전해도 되기때문에 전기를 걍 아낄 수 있게 되는것이다.)

-> 스레드 간의 통신이 필요한 경우에도 별도의 자원을 이용하는 것이 아니라, 전역 변수의 공간 또는 동적으로 할당된 공간인 Heap 영역을 이용하기 때문에 프로세스 간 통신 방법(IPC)에 비해 스레드 간의 통신 방법이 훨씬 간단하다는 장점이 있다.

-> 시스템의 처리량(Throughput)이 향상되고 자원 소모가 줄어들어 자연스럽게 프로그램의 응답 시간이 단축된다.

-> 이런 장점 때문에 여러 프로세스로 할 수 있는 작업을 하나의 프로세스에서 스레드로 나눠 수행하는것이다.

멀티 스레딩의 단점?
-> 위에서 설명했듯, 여러개의 프로세스를 기반으로 프로그래밍을 할 때에는 프로세스간 서로 공유하는 자원이 없다. 즉 동일한 자원에 동시에 여러개의 프로세스가 접근하는 일이 없다는 말이다. 
-> 하지만 여러 스레드를 기반으로 프로그래밍을 할 때에는 여러개의 스레드가 서로 공유하는 자원에 대해 고민할 필요가 있다.
-> 간단히 말하자면 여러개의 스레드가 같은 데이터에 접근하고, 힙 영역을 공유하기 때문에 여러개의 스레드가 각각 서로가 사용중인 변수나 자료구조에 접근해서 엉뚱한 값을 읽어온다던가 그 값을 수정해버리는 일이 발생할 수도 있다.

-> 그렇기 때문에 멀티 스레딩 환경에서는 동기화 작업이 필요한 것이다.
-> 동기화를 통해 작업의 처리 순서를 제어하고, 접근할 수 있는 공유 자원에 대한 접근을 제어해야한다.



동시성과 병렬성의 차이?
-> 동시에 돌릴 수 있는 스레드 수는 컴퓨터에 있는 코어 갯수로 제한된다.
-> 운영체제(또는 가상 머신)는 각 스레드를 시간에 따라 분할하여, 여러 스레드가 일정 시간마다 돌아가면서 실행되도록 하는데 이러한 방식을 시분할 이라고 한다.
    - Concurrency(동시성, 병행성): 여러 개의 스레드가 시분할 방식으로 동시에 수행되는 것처럼 착각을 불러일으킨다.
    - Parallelism(병렬성): 멀티 코어 환경에서 여러 개의 스레드가 실제로 동시에 수행된다.


Context Switching?
-> 다른 태스크(프로세스, 스레드)가 일을 시작할 수 있도록 이미 실행중인 태스크(프로세스, 스레드)를 멈추는 것을 Context Switching이라고 한다.
