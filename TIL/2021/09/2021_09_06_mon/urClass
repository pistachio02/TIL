Https?
-> http란 (Hypertext Transfer Protocol).
-> 인터넷에서 데이터를 주고받을 수 있는 통신 프로토콜.
-> https는 거기에 secure를 더한것. (http + secure = https)
-> http 프로토콜 내용을 암호화 해서 보안성이 추가됨.
-> https의 특징은 인증서, CA, 비대칭 키 암호화를 사용함.
-> (Hyper Text Transfer Protocol Secure Socket layer)

인증서(certificate)?
-> 데이터를 보내준 서버가 정말로 데이터를 보내준 서버인지 인증 확인하는 용도로 사용됨.
-> 인증서의 내용에 서버의 도메인 관련 정보가 있어서 데이터 제공자의 인증을 용이하게 함.
(서버에서 클라이언트로부터 요청을 받는다면, 서버는 그 요청에 대한 응답과 함께 인증서를 클라이언트로 전송한다. 그러면 클라이언트는 인증서에 작성된 도메인과, 응답객체에 담긴 도메인을 비교하고, 그 비교한 두개의 도메인이 일치한다면 전달받은 데이터가 정말로 데이터를 보내준 데이터라는것을 알 수 있게 되는것이고 만약 비교한 그 두개의 도메인이 서로 다르다면 전달받은 데이터가 데이터를 보내준 서버로부터 받아온 데이터가 아니고 제3자 공격과 같은 중간에 다른 어떠한 공격으로 인한 전혀 다른 데이터라는것을 알 수 있게 된다.)

CA(certificate Authority)?
-> 위 설명한 인증서를 발급해주는 발급기관.
-> 각 브라우저는 각자 신뢰하는 CA의 정보를 가지고 있다.
-> 그러므로 각 브라우저는 인증서가 다 차이가 난다.

비대칭 키 암호화?
-> 전혀 다른 키 한 쌍으로 암호화 및 복호화를 진행할 수 있다.
-> 다만 어느 하나의 키로 암호화를 진행했다면 복호화 시에는 다른 키가 필요하다.
-> 예를 들어 a:b가 하나의 쌍이라고 봤을때 a키로 암호화를 했다면 복호화 시에는 꼭 b키가 있어야 한다. (b키로만 복호화가 가능)
-> 그렇기 때문에 한쌍의 키 중 하나는 안전하게 숨겨두고, 나머지 하나의 키만 클라이언트에 공개해서 데이터를 안전하게 전송할 수 있게 한다.


Https의 통신과정을 간략하게 설명하자면?
-> 크게보면 hand shake, 비밀키 생성, 상호 키 검증 으로 3단계로 나뉘게 된다.
-> hand shake에서는 클라이언트에서 서버로 어떠한 요청이 있을때 우선 서버가 인증서정보와 키 한쌍중 공개키 하나를 클라이언트로 전송한다.
-> 그러면 클라이언트는 전달받은 공개키로 임의의 정보를 암호화해서 서버로 보내고, 서버도 공개키로 임의의 정보를 암호하해서 클라이언트로 전달한다. (비밀키를 생성하기 위한 과정)
-> 클라이언트와 서버는 서로 교환한 임의의 정보를 바탕으로 비밀키를 생성한다.
-> 클라이언트가 임의의 정보를 만들어진 비밀키로 암호화를 해서 서버로 전송하고, 서버는 전달받은 임의의 정보를 복호화를 하고, 다시 암호화를 해서 클라이언트로 전송한다.
-> 클라이언트가 서버로부터 다시 받은 임의의 정보를 똑같이 복호화 해서 확인했을때 처음에 보낸 그 임의의 정보가 맞다면 클라이언트와 서버 둘 다 같은 키 쌍을 만드는데 성공한것.

-> 이후 이 만들어진 키를 가지고 실제 데이터를 서로 주고받게 된다.


https가 중요한 이유?
-> 클라이언트는 데이터 제공자가 제공해준 데이터를 사용할 수밖에 없다.
-> 그렇기에 요청 및 응답을 중간에서 가로채는 중간자 공격에 취약하기때문.


tip!!!
⬇️⬇️⬇️⬇️

mkcert라는 프로그램을 이용해서 로컬 환경(내 컴퓨터)에서 신뢰할 수 있는 인증서를 만들 수 있다.
-> brew install mkcert
(mkcert를 homebrew를 통해 설치)
-> mkcert -install
(로컬을 인증된 발급기관으로 추가함)
-> mkcert -key-file key.pem -cert-file cert.pem localhost 127.0.0.1 ::1
(로컬 환경에 대한 인증서를 만들어야 하는데 localhost로 대표되는 로컬 환경에 대한 인증서를 위 명령어를 통해 만든다)
(위 명령어를 통해 옵션으로 추가한 localhost, 127.0.0.1(IPv4), ::1(IPv6)에서 사용할 수 있는 인증서가 완성되었고, 그러면 cert.pem, key.pem 이라는 파일이 생성된걸 볼 수 있다)
(인증서는 공개키, 그리고 인증기관의 서명을 포함하고 있으므로 공개되어도 상관이 없지만, key.pem의 경우 개인 키이므로 암호처럼 다뤄야 한다. git에 커밋하면 안됨.)



Hashing?
-> 어떠한 문자열에 임의의 연산을 적용해서 다른 문자열로 변환하는것.
    - 모든 값에 대해 해시값을 계산하는데 오래 걸리지 않아야 한다.
    - 최대한 동일한 해시값을 피해야하며 모든 값은 고유한 해시값을 가져야 한다.
    - 아주 작은 단위의 변경이라도 완전히 다른 해시값을 가져야 한다.

Salt?
-> 암호화해야 하는 값에 어떠한 별도의 값을 추가하여 결과를 변형하는것.
    - 암호화만 해놓는다면 동일한 알고리즘을 사용했을 때 늘 해시된 결과가 동일할것이다.
    - 그렇기때문에 원본값에 임의로 약속된 별도의 문자열을 추가해서 해시를 진행하고 결과로 전혀 다른 해시값을 반환하게 된다.
    - 그렇게 되면 만약 알고리즘이 노출되더라도 원본값을 보호할 수 있게 되기에 보안성이 더 높다.

Salt 사용 시 주의점?
-> 유저와 패스워드별로 유일한 값을 가져야 한다.
-> 사용자 계정을 생성할때와 비밀번호를 변경할때마다 새로운 임의의 salt를 사용해서 해싱해야 한다.
-> salt는 절대 재사용하면 안된다.
-> salt는 db의 유저테이블에 같이 저장되어야 한다.



최대한 간단하게 종합적으로 설명을 해보자면,

-클라이언트, 서버, 데이터베이스가 있을때 
-클라이언트에서 데이터 요청을 위해 유저이메일과 비밀번호를 입력하고,
-유저이메일과 비밀번호를 전달받은 서버는 요청받은 데이터를 반환하기 전에 먼저 전달받은 유저이메일과 비밀번호를 db에 저장된 유저이메일과 비밀번호와 비교하고, 동일하다면
-해당 요청에 대한 데이터를 db로부터 받아서 클라이언트로 보내주게 된다.

(위와 같은 경우, 만약 비밀번호 정보가 유출되었다고 한다면, 보통의 사람들은 대부분 비슷하게 비밀번호를 설정해두기 때문에 1개의 비밀번호가 유출되었을때 그 비밀번호를 가지고 다른 사이트들에서도 동일하게 설정된 비밀번호가 있다면 그 다른 사이트들에서도 유저의 정보가 유출될 수 있다.)

그런데 만약 hashing을 통해 비밀번호 정보를 어떠한 알고리즘을 통해 암호화 해서 보관하게 된다면? 

-비밀번호가 유출되더라도 암호화된 상태이기때문에 암호화를 시킨 알고리즘을 모른다면 비밀번호의 원 정보를 보호할 수 있다.

그런데 만약 또 알고리즘까지 같이 유출이 된다면?

salt를 통해 보호를 하면 된다.

암호화된 비밀번호 정보와, 함호화 시킨 알고리즘까지 유출된다 하더라도, salt를 사용하게 되면, 원 비밀번호 정보에 대한 보호를 할 수 있다. 왜?

salt란 원 비밀번호 정보에 어떠한 별도의 값을 추가해서 알고리즘을 통해 암호화 하는것이기때문에 salt정보를 모른다면 비밀번호화 알고리즘까지 유출된다 하더라도 복호화했을때 원 비밀번호 정보를 알 수 없기때문이다.



---------------------------------------------------------------------




HTTP는 무상태성(stateless)라고 했는데 어떻게 정보가 유지가 될까?
-> 쿠키덕분임.

쿠키란?
-> 서버가 일방적으로 클라이언트에 전달하는 작은 데이터.
-> 서버가 웹브라우저에 정보를 저장하고 불러올 수 있는 수단.
-> 해당 도메인에 대한 쿠키가 존재한다면 웹브라우저는 도메인에게 http요청 시 쿠키를 함께 전달한다.

쿠키가 어디에 유용한가?
-> 사용자 선호, 테마 등 장시간 보존해야하는 정보 저장에 적합하다.
(로그인상태 유지 등)

쿠키 전달방법?
-> 서버가 응답 헤더에 Set-Cookie라는 프로퍼티로 쿠키의 값, 이름, 경로등의 옵션을 담아 클라이언트로 보낸다.
-> 쿠키가 담긴 응답을 받은 클라이언트는 응답 헤더에 담긴 Set-Cookie를 확인하게 되고,
-> 그 다음부터는 클라이언트가 서버로 매 요청시마다 쿠키의 이름과 값을 전달하게 된다.
-> 매 요청시마다 자동으로 쿠키를 서버로 전달함.

쿠키의 다양한 옵션들?
-> Domain : 서버와 요청의 도메인이 일치하는 경우 쿠키를 전송.
-> Path : 서버와 요청의 세부 경로가 일치하는 경우 쿠키를 전송.
-> MaxAge or Expires : 쿠키의 유효기간 설정.
-> HttpOnly : 스크립트에서의 쿠키 접근 가능여부 결정. (브라우저만 접근 가능하게 설정할 수 있는 부분 / 만약 스크립트에서 접근 가능하게 둔다면 XSS 공격에 취약하게 된다. / true로 설정된 경우 자바스크립트에선 쿠키 접근 불가능 하고 해당 옵션에 대해 명시되지 않은 경우 기본으로는 false로 지정되어 있기때문에 true로 해주는게 좋다.)
-> Secure : HTTPS 프로토콜에서만 쿠키 전송 여부 결정. (해당 옵션이 true로 설정된 경우 HTTPS프로토콜을 이용해야지만 쿠키를 전송할 수 있게 된다.)
-> SameSite : CORS요청의 경우 옵션 및 메서드에 따라 쿠키 전송 여부 결정. (이부분을 만약 none으로 준다면 https 프로토콜과 secure쿠키옵션을 꼭 반드시 사용해야 한다.)
    - SameSite에 대해 조금 더 설명하자면,
        - Lax :Cross-Origin 요청이면 'GET' 메소드에 대해서만 쿠키를 전송할 수 있다.
        - Strict : Cross-Origin이 아닌 same-site 인 경우에만 쿠키를 전송 할 수 있다.
        - None: 항상 쿠키를 보내줄 수 있다. 다만 쿠키 옵션 중 Secure 옵션이 필요하다.
('same-site'는 요청을 보낸 Origin과 서버의 도메인이 같은 경우를 말한다.)


쿠키의 동작 순서?
-> 클라이언트가 페이지를 요청한다. (사용자가 웹사이트 접근)
웹 서버는 쿠키를 생성한다.
-> 생성한 쿠키에 정보를 담아 HTTP 화면을 돌려줄 때,
같이 클라이언트에게 돌려준다.
-> 넘겨 받은 쿠키는 클라이언트가 가지고 있다가(로컬 PC에 저장)
-> 다시 서버에 요청할 때 요청과 함께 쿠키를 전송한다.
-> 동일 사이트 재방문시 클라이언트의 PC에 해당 쿠키가 있는 경우,
요청 페이지와 함께 쿠키를 전송한다.


쿠키에 대해 정리를 하자면,
-> 서버에서 클라이언트에 데이터를 저장하는 하나의 방법.
-> 서버에서 클라이언트에 데이터를 저장한 이후 아무때나 그 저장한 데이터를 가져올 순 없고, 특정 조건들이 만족하는 경우에만 가져올 수 있는데 그 조건들이 위에 간단히 설명한 다양한 옵션들이다.

무상태성인 http는 이러한 쿠키를 통해 상태성을 가지게 되고 이는 사용자 입장에서는 편리한 점이 많이 있겠지만 기본적으로 쿠키는 오랜 시간 유지가 될 수 있고 자바스크립트를 통해 접근할 수 도 있기 때문에 쿠키에 민감한 정보를 담는것은 위험할 수 있다.


---------------------------------------------------------------------

Session?
-> 위 배웠던 쿠키는 클라이언트에 데이터를 저장했다면 세션은 서버에 데이터를 저장한다.
-> 그리고 쿠키에는 그 데이터에 대한 id만 암호화된 상태로 부여한다.
-> 일정 시간동안 같은 사용자(브라우저)로부터 들어오는
일련의 요구를 하나의 상태로 보고, 그 상태를 일정하게 유지시키는 기술이다.
-> 위에서 말한 일정 시간은 방문자가 웹 브라우저를 통해 웹 서버에 접속한 시점으로부터 웹 브라우저를 종료하여 연결을 끝내는 시점을 말한다.


Session 전달방법?
-> 결국엔 쿠키에 유저의 정보를 담아주는것.


Session의 특징?
-> 브라우저를 닫거나, 서버에서 세션을 삭제했을때만 삭제가 되므로,
쿠키보다 비교적 보안이 좋다.


Session의 동작 순서?
-> 클라이언트가 페이지를 요청한다. (사용자가 웹사이트 접근)
-> 서버는 접근한 클라이언트의 Request-Header 필드인 Cookie를 확인하여, 클라이언트가 해당 session-id를 보냈는지 확인한다.
-> session-id가 존재하지 않는다면, 서버는 session-id를 생성해 클라이언트에게 돌려준다.
-> 서버에서 클라이언트로 돌려준 session-id를 쿠키를 사용해 서버에 저장한다.
쿠키 이름 : JSESSIONID
-> 클라이언트는 재접속 시, 이 쿠키(JSESSIONID)를 이용하여 session-id 값을 서버에 전달한다.

---------------------------------------------------------------------

쿠키와 세션을 사용하는 이유?
-> http프로토콜의 특징이자 약점을 보완하기 위해서 사용한다.
    - Connectionless 프로토콜 (비연결지향) : 클라이언트가 서버에 요청(Request)을 했을 때, 그 요청에 맞는 응답(Response)을 보낸 후 연결을 끊는 처리방식
    - Stateless 프로토콜 (상태정보 유지 안함) : 클라이언트의 상태 정보를 가지지 않는 서버 처리 방식 / 클라이언트와 첫번째 통신에서 데이터를 주고 받았다 해도,
    두번째 통신에서 이전 데이터를 유지하지 않는다.

-> 하지만 실제로는 데이터 유지가 필요한 경우가 많기때문에 쿠키와 세션을 사용하면서 위 두가지의 약점을 보완할 수 있다. 

쿠키와 세션의 차이?
-> 쿠키는 데이터를 클라이언트에 저장, 세션은 서버에 저장.
-> 쿠키의 저장형식은 text, 서버는 객체.
-> 쿠키의 만료시점은 쿠키 저장시 설정한 만료시점, 세션은 브라우저 종료시 삭제됨(기간 지정도 가능).
-> 쿠키의 속도는 세션보다 빠름, 세션은 쿠키보다 느림
-> 쿠키의 보안은 세션보다 안좋음, 세션은 쿠키보다 좋음.

---------------------------------------------------------------------

ZOOM시간 이후 간략하게 적은것들.

https가 왜 필요한지, 왜 사용하는지?
- 무결성과 기밀성을 지키기위해 
    - 기밀성 : 누구도 메세지를 가로챌 수 없게 하게 하기 위해, 메세지를 가로챌 수 없다는거는 메세지를 읽을 수 없다는것, 메세지를 읽을 수 없다는것은, 메세지는 암호화되어있다는 말.
    - 무결성 : 메세지가 A -> B 로 원본 그대로 잘 도착했음을 알기 위해.
(기밀성은 privacy, 무결성은 integrity)




암호화 방식에는 대칭키 암호화, 비대칭키 암호화가 있음.
대칭키암호화는 암호화와 복호화를 하는 키가 똑같다.
비대칭키암호화는 암호화와 복호화를 하는 키가 다르다.

비대칭키암호화에서 왜 공개키 비공개키를 나누냐?
- 키가 1개라면 공개하기가 어려움. 왜냐? 누구한테나 다 공개해야하기때문에.
- 키가 2개라면 1개는 공개, 1개는 비공개로 해줄 수 있음.

https에서는 보통 공개키로 암호화, 비공개키(개인키)로 복호화를 한다.




인증서는 무엇을 보장하냐?
- 브라우저에서 접속한 서버가 의도한 서버임을 보장한다.
- 브라우저와 서버가 통신할 때 암호화 할 수 있도록 서버의 공개키를 제공한다.

CA로부터 발급받은 인증서가 있다. (CA는 몇군데 안되서 리스트가 저장되어있다.)
그럼 그 인증서에는 공개키가 있고 개인키가 있는데,
공개키는 브라우저에 주고(cert.pem), 개인키는 서버에 준다(key.pem).

mkcert로 만든 인증서를 예로 하자면 CA는 나, 혹은 내 컴퓨터이다.


세션아이디가 쿠키에 저장되는 이름이 connect.sid이다.


오늘 했던 스프린트는 비밀번호 등에 암호화하는 (sha512 라이브러리 사용) 과정이 없음. 
db를 보면 알겠지만 아이디나 비번 다 그대로 저장된다는 가정임.
그래서 프로젝트땐 만약 해싱이나 솔팅을 하게된다면 어떻게 해야하는지도 알아야 함.
