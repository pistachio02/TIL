<TIL>

Toy 31번

문제
-> 정수를 요소로 갖는 배열과 특정 구간을 입력받아, 해당 구간 내에서 최소값을 리턴해야 합니다.


인자 1 : arr
-> number 타입을 요소로 갖는 배열
-> arr.length는 500,000 이하
-> arr[i]는 -100,000 이상 100,000 이하의 정수

인자 2 : ranges
-> number 타입을 요소로 갖는 배열
-> ranges.length는 10,000 이하
-> ranges[i]는 특정 구간을 의미
-> ranges[i][0]은 i번째 구간의 시작 인덱스
-> ranges[i][1]은 i번째 구간의 마지막 인덱스


출력
-> 배열(arr)를 리턴해야 합니다. (입출력 예시 참고)
-> arr[i]는 i번째 구간(ranges[i])의 최소값


입출력 예시
⬇️⬇️⬇️⬇️⬇️⬇️

const arr = [1, 3, 2, 7, 9, 11];
const mins = rangeMinimum(arr, [
  [1, 4],
  [0, 3],
]);
console.log(mins); // --> [2, 1]

// 위 예시를 설명하자면 arr이라는 배열이 들어왔고 range로 [1, 4] 그리고 [0, 3]이 들어왔을때
// [1, 4] 그리고 [0, 3]이 의미하는것은 배열의 [1번째 인덱스, 4번째 인덱스] 그리고 [0번째 인덱스, 3번째 인덱스]이다.
// 배열의 1번째 인덱스 3, 배열의 4번째 인덱스 9 사이에 숫자들은 3, 2, 7, 9 이고
// 배열의 0번째 인덱스 1, 배열의 3번째 인덱스 7 사이의 숫자들은 1, 3, 2, 7 이다.
// 이렇게 range에 해당하는 인덱스로 그 사이의 값들을 찾은 뒤, 그냥 그 값들 중 가장 작은 값을 찾아 리턴하면 된다.
// 그렇게 되면 [1, 4] range의 가장 작은 값은 2가 될테고, [0, 3]의 가장 작은 값은 1이 될것이다.
// 그래서 그냥 그 두개의 가장 작은 값을 [2, 1]로 리턴해주면 되는것이다.


Advanced?
⬇️⬇️⬇️⬇️⬇️⬇️

-> Advanced1: 주어진 배열에서 특정 구간의 최소값을 구하는 단순한 알고리즘은 단순 순회(O(N))입니다. 같은 배열에 대해서 다양한 구간에 대한 최소값을 구할 경우, 단순 순회는 O(N^2) 입니다(구간의 개수도 N개라 가정할 경우). 적절한 자료구조를 통해 이와 같은 구간 조회에 대한 반복 작업을 효율적(O(N * logN))으로 수행할 수 있습니다. 구간 트리(segment tree)에 대해서 학습하시고, Advanced 테스트 케이스를 통과해 보시기 바랍니다.
-> 트리를 객체 또는 배열로 구현할 수 있습니다. 객체로 구현하는 것이 보다 직관적이기 때문에 객체로 먼저 도전하시기 바랍니다. 레퍼런스는 모두 주어집니다.
-> 구간의 최대값, 합도 동일한 로직으로 구현하면 됩니다.


문제 풀이
⬇️⬇️⬇️⬇️⬇️

const rangeMinimum = function (arr, ranges) {
  // TODO: 여기에 코드를 작성합니다.
  let cMT = (arr, ts, te, tree, idx) => {
    if(ts === te) {
      tree[idx] = arr[ts];
      return arr[ts];
    }

    let mid = Math.floor((ts + te) / 2);
    tree[idx] = Math.min(
      cMT(arr, ts, mid, tree, idx * 2 + 1), //
      cMT(arr, mid + 1, te, tree, idx * 2 + 2)
    );

    return tree[idx];
  };

  let tree = [];
  cMT(arr, 0, arr.length - 1, tree, 0);

  let findMin = (ts, te, rs, re, idx) => {
    if(rs <= ts && te <= re) {
      return tree[idx];
    }

    if(te < rs || re < ts) {
      return Number.MAX_SAFE_INTEGER;
    }

    let mid = parseInt((ts + te) / 2);
    return Math.min(
      findMin(ts, mid, rs, re, 2 * idx + 1), //
      findMin(mid + 1, te, rs, re, 2 * idx + 2)
    );
  };

  let mins = ranges.map((range) => {
    let [start, end] = range;
    return findMin(0, arr.length - 1, start, end, 0);
  });

  return mins;
  
};
