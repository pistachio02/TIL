OAuth 2.0?
-> 인증을 위한 표준 프로토콜의 한 종류
-> 보안 된 리소스에 액세스하기 위해 클라이언트에게 권한을 제공(Authorization)하는 프로세스를 단순화하는 프로토콜 중 한 방법입니다.
-> 간단히 말하면 어떠한 서비스가 있고 그 서비스에서 유저에 대한 인증을 진행하려고 할때, 인증을 다른 인증된 서비스를 통해 대신 하는 것이다.
-> 사용자 정보를 가지고 있는 웹 서비스(GitHub, google, facebook 등)에서 사용자의 인증을 대신해주고, 접근 권한에 대한 토큰을 발급한 후, 이를 이용해 내 서버에서 인증을 해주는것.
-> 예시). 폰게임을 하려고 하는데 꼭 로그인이 필요함, 그때 애플계정 로그인하기 나 구글 로그인하기 를 통해서 게임을 서비스 하는 곳에서 직접 내 정보를 인증하는것이 아닌 이미 내 정보를 가지고 있는 애플이나 구글을 통해 내 정보를 인증하는것이다.


OAuth를 왜쓰는거야?
-> 우리는 웹상에서 엄청나게 많은 서비스들을 이용하고 있는데 그럴때마다 매번 새로 회원가입해서 아이디랑 비번 만들고 또 그걸 기억하고 있고 매 이용시마다 로그인 하고 그런 절차들이 너무 귀찮고 번거롭기 때문에 만약 내가 이미 구글에 가입되어있고 구글을 이용하는 유저라면 새로운 웹 서비스를 이용하고 싶을때 그 웹 서비스가 구글 소셜 로그인 기능을 제공하는 서비스라면 그 웹서비스에 새로 회원가입하지 않고 구글 계정 정보를 가지고 그 웹 서비스를 이용할 수 있게 되니까 유저로서는 구글 계정 아이디랑 비번만 알고있으면 다른 또 새로운 웹 서비스를 이용할때에도 매번 아이디나 비번 생성해서 입력하고 사용하는것이 아닌 구글계정 정보를 통해 새로운 웹서비스를 이용할 수 있게 되니까 너무 편리한거지. 그런 이유때문에 사용하는거야.

-> 또 보안상으로도 이점이 있는데 매번 새로운 웹 서비스에 내 정보를 입력하고 하는게 아니기때문에 내 민감한 정보들이 그러한 웹 서비스들에게 노출될 필요가 없고 그러한 면에서 보자면 OAuth를 이용하는게 훨씬 더 보안상으로도 안전하지.


꼭 알아야 하는 용어들?

-> Resource Owner :  액세스 중인 리소스의 유저이다. 김코딩의 구글 계정을 이용하여 App에 로그인할 경우, 이때 Resource owner은 김코딩이 된다.
-> Client :  Resource owner를 대신하여 보호된 리소스에 액세스하는 응용프로그램이다. 클라이언트는 서버, 데스크탑, 모바일 또는 기타 장치에서 호스팅할 수 있다.
-> Resource server :  client의 요청을 수락하고 응답할 수 있는 서버이다.
-> Authorization server :  Resource server가 액세스 토큰을 발급받는 서버이다. 즉 클라이언트 및 리소스 소유자를 성공적으로 인증한 후 액세스 토큰을 발급하는 서버를 말한다.
-> Authorization grant :  클라이언트가 액세스 토큰을 얻을 때 사용하는 자격 증명의 유형이다.
-> Authorization code :  access token을 발급받기 전에 필요한 code 이다. client ID로 이 code를 받아온 후, client secret과 code를 이용해 Access token 을 받아온다다.
-> Access token :  보호된 리소스에 액세스하는 데 사용되는 credentials이다. Authorization code와 client secret을 이용해 받아온 이 Access token으로 이제 resource server에 접근을 할 수 있다.
-> Scope :  scope는 토큰의 권한을 정의한다. 주어진 액세스 토큰을 사용하여 액세스할 수 있는 리소스의 범위이다. (예를 들어 사진에만 접근하게 권한 설정을 한다던가 연락처에만 접근할 수 있게 권한 설정을 한다던가 할 수 있다.)


OAuth의 인증 절자?

-> 유저가 있고, 클라이언트(새로운 app 서비스)가 있고, 구글이 있다면,
-> 유저가 클라이언트로 나 구글 소셜 로그인해서 너네 서비스좀 이용 하자 라고 요청을 보낸다. (구글계정으로 가입하는것이기때문에 구글에 해놓은 내 프사가 필요하다는 가정).
-> 그럼 클라이언트는 구글한테 가서 야 유저가 너네 계정 이용해서 우리 서비스 이용 하려고 한다는데 괜찮음? 유저가 우리 서비스 이용하려면 너네 계정에 해놓은 유저 프사나 그런것들이 좀 필요한데 줄수 있어? 라고 물어보고
-> 그럼 구글은 유저한테 와서 야 너 우리 계정 정보 가지고 클라이언트 서비스 이용한다던데 맞아? 사진이나 그런것들 달라고 하던데.. 라고 물어보면
-> 유저는 ㅇㅇ 맞아 (여기서 구글 계정으로 로그인하는 과정 및 사진 줘도 되 대신 사진만 줘 라고 허락해주는 과정이 있음.) 라고 대답해주고,
-> 그럼 구글은 ㅇㅋ 그럼 너가 줘도 된다 했으니 프사 해놓은거 클라이언트한테 준다~ 라고 하고,
-> 구글은 클라이언트가 사진 요청을 할때 필요한 토큰을 클라이언트에게 줘야 하는데 바로 주는건 좀 보안상으로도 그렇고 하니 authorization code 를 먼저 클라이언트한테 준다. 그러면서 야 너 이 authorization code 가지고 오면 토큰으로 내가 바꿔줄게 라고 말하고,
-> 그럼 클라이언트는 아 개귀찮네, 야 authorization code 여깄다 토큰 줘
-> 그럼 구글은 아 ㅇㅋ 토큰 여기 하며 토큰을 건네주고,
-> 클라이언트는 토큰을 가지고 유저 사진을 가지고 있는 구글 서버(Resource server)로 가서 야 여기 나 토큰 받아왔고 유저가 프사좀 가져오래 하며 사진을 달라는 요청을 한다.
-> 그럼 구글 서버는 아 ㅇㅋ 우리가 발급한 토큰이 맞네 하면서 사진 여기~ 하고 사진을 건네주고
-> 클라이언트는 사진을 받아와서 유저가 서비스 이용 시 사용 할 수 있도록 한다.




--------------------------------------------------------------------------------------



Authentication(인증)과 Authorization(권한부여)의 차이?

-> 인증(authentication)은 자신이 누구라고 주장하는 사람을 확인하는 절차이다. 
-> 권한부여(authorization)는 가고 싶은 곳으로 가도록 혹은 원하는 정보를 얻도록 허용하는 과정이다.

-> 예를 들면 어떤 사람이 갑자기 찾아와서 야 나 누구누구인데 확인좀 해줘, 라고 했을때 그 사람이 주장하는 신분이 진짜 맞는지 확인하는 과정이 인증(Authentication)이고,
-> 그 사람 신분 확인이 끝나고 갑자기 또 그 사람이 야 나 확인됬지? 나 이것저것 여러가지 좀 해야하는데 하게 해줘, 라고 했을때 그 사람이 하겠다는 여러가지 것들을 할 수 있게 해주는게 권한부여(Authorization)이다.




--------------------------------------------------------------------------------------



Authorization Code Grant Type이란?
-> Authorization Code Grant Type은 Authorization Server에게 토큰을 발행받기 위해서 code값을 요청하고 이 code값을 바탕으로 토큰을 발급받는 방식을 뜻한다.