++++++++++++++++++++++

    MVC 패턴?

    - 디자인패턴 중 하나인 MVC패턴. 어플리케이션을 세 가지 역할로 구분한 개발 방법론이다.
    - 디자인 패턴이란 프로그램이나 어떤 특정한 것을 개발하는 중에 발생했던 문제점들을 정리해서 상황에 따라 간편하게 적용해서 쓸 수 있는 것을 정리하여, 특정한 규약을 통해 쉽게 쓸 수 있는 형태로 만든 것을 말한다. (좀 더 쉽고 편리하게 사용할 수 있게 만든 특정한 방법들을 디자인 패턴이라고 한다.)
    - MVC 는 Model, View, Controller의 약자이다. (하나의 애플리케이션, 프로젝트를 구성할 때 그 구성요소를 세가지의 역할로 구분한 패턴)
    
    모델?

    - 애플리케이션의 정보, 데이타를 나타낸다. 데이타베이스, 처음의 정의하는 상수, 초기화값, 변수 등을 뜻하고, 이러한 DATA, 정보들의 가공을 책임지는 컴포넌트를 말한다.
    - 모델은 다음과 같은 규칙을 가지고 있다.
        - 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 한다.
        - 뷰나 컨트롤러에 대해서 어떤 정보도 알지 말아야 한다.
        - 변경이 일어나면, 변경 통지에 대한 처리방법을 구현해야만 한다.
    - Model은 다른 컴포넌트들에 대해 알지 못한다. 자기 자신이 무엇을 수행하는지만 알고 있다.
    
    뷰?

    - input 텍스트, 체크박스 항목 등과 같은 사용자 인터페이스 요소를 나타낸다. 데이터 및 객체의 입력, 그리고 보여주는 출력을 담당한다. 데이터를 기반으로 사용자들이 볼 수 있는 화면이다. 
    - 뷰는 다음과 같은 규칙을 가지고 있다.
        - 모델이 가지고 있는 정보를 따로 저장해서는 안된다.
        - 모델이나 컨트롤러와 같이 다른 구성요소들을 몰라야 된다.
        - 변경이 일어나면 변경통지에 대한 처리방법을 구현해야만 한다.
    - 최종 사용자에게 무엇을 화면(UI)로 보여줄지 정한다. 화면에 무엇을 보여주기 위한 역할을 한다. 즉, 모델이 처리한 데이터나 그 작업 결과를 가지고 사용자에게 출력할 화면을 만든다. 만든 화면은 웹 브라우저가 출력한다.
    - View 역시도 다른 컴포넌트들에 대해 알지 못한다. 자기 자신이 무엇을 수행하는지만 알고 있다.
    
    컨트롤러?

    - 데이터와 사용자인터페이스 요소들을 잇는 다리역할을 한다. 사용자가 데이터를 클릭하고, 수정하는 것에 대한 "이벤트"들을 처리하는 부분을 뜻한다.
    - 컨트롤러는 다음과 같은 규칙을 가지고 있다.
        - 모델이나 뷰에 대해서 알고 있어야 한다.
        - 모델이나 뷰의 변경을 모니터링 해야 한다.

    MVC패턴을 사용해야 하는 이유?

    - 사용자가 보는 페이지, 데이터처리, 그리고 이 2가지를 중간에서 제어하는 컨트롤, 이 3가지로 구성되는 하나의 애플리케이션을 만들면 각각 맡은바에만 집중을 할 수 있게 된다. 즉 효율적이게 된다. 서로 분리되어 각자의 역할에 집중할 수 있게끔하여 개발을 하고 그렇게 애플리케이션을 만든다면, 유지보수성, 애플리케이션의 확장성, 그리고 유연성이 증가하고, 중복코딩이라는 문제점 또한 사라지게 되는 장점이 있다. 
    - 예시? 리액트는 단방향 데이터 흐름으로 데이터 변경에 관한 DOM객체만 변경해주는 체계, 데이터가 변경되면 양방향 데이터 바인딩처럼 모델 변경 > 뷰변경이 아니라 특정함수를 실행시킴으로써 DOM객체를 갱신한다.

    - MVC패턴은 결국 "어떻게 나눌 것인가"에 대한 해답 중 하나이다. 어떤 특정한 역할들에 대해 역할분담을 할 때 가이드라인을 제시하는 방법 중 하나가 바로 MVC패턴이라는 것.



    1. 모델: 데이터와 비즈니스 로직을 관리합니다.
    2. 뷰: 레이아웃과 화면을 처리합니다.
    3. 컨트롤러: 명령을 모델과 뷰 부분으로 라우팅합니다.



    MVC는 Model-View-Controller의 약자. 
    개발할 때 3가지 형태로 구분하여 개발하는 소프트웨어 개발 방법론.
    Model은 무엇을 할지 정의함. 비지니스 로직에서의 알고리즘, 데이터 등의 기능을 처리함.
    Controller는 어떻게 할지를 정의함. 요청을 받아서 화면과 Model과 View를 연결시켜주는 역할을 함.
    View는 무엇을 화면으로 보여줄지 결정하는 역할을 함. 웹이라면 웹페이지, 모바일이라면 어플의 화면의 보여지는 부분.
    
    MVC는 복잡한 대규모 프로그램을 개발을 하게 되면서 문제점이 드러남.
    다수의 View와 Model이 Controller를 통해 복잡하게 연결될 수 있기 때문에 Controller가 뚱뚱해지게 되는 Massive ViewController(대규모 MVC 어플리케이션)가 되어버림.
    View와 Controller가 라이프사이클에 강하게 연결되어있고, 더불어 Controller를 통해 View와 Model간에도 관계가 복잡하게 연결되어있어서 수정시 테스트가 힘들고, 파악이 어렵기 때문에 여러 Side-Effect를 불러오게 되는 문제점이 생김.
    MVC는 위 문제점을 해결하기 위해 여러 패러다임을 수용한 다양한 패턴을 파생시킴.




    모델-뷰-컨트롤러(model–view–controller, MVC)는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다. 이 패턴을 성공적으로 사용하면, 사용자 인터페이스로부터 비즈니스 로직을 분리하여 애플리케이션의 시각적 요소나 그 이면에서 실행되는 비즈니스 로직을 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있다. MVC에서 모델은 애플리케이션의 정보(데이터)를 나타내며, 뷰는 텍스트, 체크박스 항목 등과 같은 사용자 인터페이스 요소를 나타내고, 컨트롤러는 데이터와 비즈니스 로직 사이의 상호동작을 관리한다.

    컨트롤러는 모델에 명령을 보냄으로써 모델의 상태를 변경할 수 있다. 또, 컨트롤러가 관련된 뷰에 명령을 보냄으로써 모델의 표시 방법을 바꿀 수 있다.
    모델은 모델의 상태에 변화가 있을 때 컨트롤러와 뷰에 이를 통보한다. 이와 같은 통보를 통해서 뷰는 최신의 결과를 보여줄 수 있고, 컨트롤러는 모델의 변화에 따른 적용 가능한 명령을 추가·제거·수정할 수 있다. 어떤 MVC 구현에서는 통보 대신 뷰나 컨트롤러가 직접 모델의 상태를 읽어 오기도 한다.
    뷰는 사용자가 볼 결과물을 생성하기 위해 모델로부터 정보를 얻어 온다.


    모델
    - 모델(model)이란 어떠한 동작을 수행하는 코드를 말한다. 표시 형식에 의존하지 않는다. 다시 말해, 사용자에게 어떻게 보일지에 대해 신경쓰지 않아도 된다. 모델은 순수하게 public 함수로만 이루어진다. 몇몇 함수들은 사용자의 질의(query)에 대해 상태 정보를 제공하고 나머지 함수들은 상태를 수정한다.

    뷰
    - MVC에서 모델은 여러 개의 뷰(view)를 가질 수 있다. 뷰는 보여줄 값(모델)을 컨트롤러로부터 받아와 사용자에게 보여준다.

    컨트롤러
    - MVC의 뷰는 여러 개의 컨트롤러(controller)를 가지고 있다. 사용자는 컨트롤러를 사용하여 모델의 상태를 바꾼다. 컨트롤러는 모델의 mutator 함수를 호출하여 상태를 바꾼다. 이때 모델의 상태가 바뀌면 모델은 등록된 뷰에 자신의 상태가 바뀌었다는 것을 알리고 뷰는 거기에 맞게 사용자에게 모델의 상태를 보여 준다.


++++++++++++++++++++++

    위에 있는 저 많은 정보들을 요약해보자면?

    MVC패턴이란, Model, View, Controller의 약자이며 하나의 애플리케이션 혹은 프로젝트를 개발할 때에 그 구성요소를 세가지의 역할로 구분한 디자인패턴이다.

    그렇다면 디자인패턴이라는것은 뭔가? 건축으로치면 공법에 해당하는 것으로, 소프트웨어의 개발 방법을 공식화 한 것이다. 다시 말해 좀 더 쉽고 편리하게 사용할 수 있게 만든 특정한 방법들을 디자인 패턴이라고 한다.

    모델은 애플리케이션의 정보, 데이터를 나타낸다. 간단히 말해 서버의 로직 부분. 데이터베이스를 통해 데이터 및 정보들의 가공을 책임지는 컴포넌트를 말한다.
    모델은 3가지의 규칙이 있는데 첫째, 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 한다. 둘째, 뷰나 컨트롤러에 대해서 어떤 정보도 알지 말아야 한다(뷰나 컨트롤러에 의존하지 않는다). 셋째, 변경이 일어나면, 변경 통지에 대한 처리방법을 구현해야만 한다(변경이 일어나면 뷰나 컨트롤러에게 알려야 한다.).

    (쉽게 이해하자면 모델은 서버의 로직 부분들)

    뷰는 무엇을 화면으로 보여줄지 결정하는 역할을 한다. 웹이라면 웹페이지, 모바일이라면 어플의 화면의 보여지는 부분을 의미한다. 뷰라는 말 그대로 어떻게 보여줄지 담당하는 컴포넌트이다.
    뷰는 3가지의 규칙이 있는데 첫째, 모델이 가지고 있는 정보를 따로 저장해서는 안된다. 둘째, 모델이나 컨트롤러와 같이 다른 구성요소들을 몰라야 된다. 셋째, 변경이 일어나면 변경통지에 대한 처리방법을 구현해야만 한다(모델에서 얘기 했던 것처럼 변경이 일어나면 그것을 모델이나 컨트롤러에게 알려 변경에 대한 처리 방법을 구현해야 한다. 즉 사용자가 화면에서 어떠한 정보들을 입력하거나 수정할때 그 입력된 값들을 받아서 컨트롤러나 모델에게 전달해 변경을 알려줘야 한다.).

    (쉽게 이해하자면 클라이언트의 렌더링 부분들, 즉 return <div>화면표시</div> 부분들)

    컨트롤러는 모델과 뷰의 중간에서 서로를 잇는 다리 역할을 한다. 
    컨트롤러는 2가지의 규칙이 있는데 첫째, 모델이나 뷰에 대해서 알고 있어야 한다. 둘째, 모델이나 뷰의 변경을 지속적으로 모니터링 해야 한다.

    (쉽게 이해하자면 클라이언트의 함수부분들. 예를 들면 화면에 표시할 수 있는 여러가지 정보들을 서버로부터 혹은 데이터베이스로부터 받아오게 하는 함수를 뜻함. 렌더링부분에서 만약 유저가 어떠한 버튼을 눌렀을시 실행되게 연결해준 함수가 있듯이 그러한 함수의 역할이라고 볼 수 있다. 이는 단순히 데이터를 받아오는것 뿐만 아니라 crud의 역할을 하는 함수(컨트롤러)라고 볼 수 있다.)

++++++++++++++++++++++

    우선 MVC 패턴에 대해서 공부를 해봤다.
    구글 검색을 해보고 모아놓은 여러가지 정보들을 간단하게나마 정리를 해봤는데 흠..
    전보다는 그래도 조금 더 이해가 되는것 같지만 여전히 이런 개념적인 부분들은 쉽게 이해하고 설명하는것이 까다롭다.
    목요일에 최대한 설명을 잘 할 수 있을까 걱정이 된다.
    조금 더 공부를 해봐야 겠다.

++++++++++++++++++++++
