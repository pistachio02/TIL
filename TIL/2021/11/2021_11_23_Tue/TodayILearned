++++++++++++++++++++++

    Database ORM? (Object Relational Mapping, 객체-관계 매핑)

    - 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 말한다.
        - 객체 지향 프로그래밍은 클래스를 사용하고, 관계형 데이터베이스는 테이블을 사용한다.
        - 객체 모델과 관계형 모델 간에 불일치가 존재한다.
        - ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결한다.
    
    (DBMS를 뭘 쓰든지 관계없이 해당 ORM이 제공하는 문법)
    - Object Relational Mapping. 한글로는 객체-관계 매핑.
    - 객체를 관계형 데이터베이스와 연결해주는 개념이라고 생각하면 된다.
    - 객체지향에서는 클래스라는 개념이 있지만, 관계형 데이터베이스에는 테이블이라는 개념이 있다.
    - 프로그래밍 쪽에서는 웬만해서는 객체지향 패러다임으로 만드는 경우가 허다해서, 관계형 데이터베이스를 이용하면서도 객체에 대한 표현에 제약을 받지 않고 객체처럼 사용하고자 DMBS 앞 단에서 기능하는 새로운 개념이라고 생각하면 된다.

    - 객체 지향 프로그래밍에서 쓰이는 객체라는 개념을 구현한 클래스와 관계형 데이터베이스에서 쓰이는 데이터인 테이블을 자동으로 매핑(연결)하는 것을 의미한다.
    - 클래스와 테이블은 서로가 기존부터 호환가능성을 두고 만들어진 것이 아니기 때문에 불일치가 발생하는데, 이를 ORM을 통해 객체 간의 관계를 바탕으로 SQL문을 자동으로 생성하여 불일치를 해결한다.
    - 따라서 ORM을 이용하면 따로 SQL문을 짤 필요없이 객체를 통해 간접적으로 데이터베이스를 조작할 수 있게 된다.

    - ‘ORM(Object Relational Mapping)’은 ‘객체로 연결을 해준다’는 의미로, 어플리케이션과 데이터베이스 연결 시 SQL언어가 아닌 어플리케이션 개발언어로 데이터베이스를 접근할 수 있게 해주는 툴입니다. ORM은 SQL문법 대신 어플리케이션의 개발언어를 그대로 사용할 수 있게 함으로써, 개발 언어의 일관성과 가독성을 높여준다는 장점을 갖고 있습니다.

    (프로젝트에서 사용한 Sequelize가 ORM)

    장점?

    - 객체 지향적인 코드로 인해 더 직관적이고 비즈니스 로직에 더 집중할 수 있게 도와준다.
    - ORM을 이용하면 SQL Query가 아닌 직관적인 코드(메서드)로 데이터를 조작할 수 있어 개발자가 객체 모델로 프로그래밍하는 데 집중할 수 있도록 도와준다.
    - 각종 객체에 대한 코드를 별도로 작성하기 때문에 코드의 가독성을 올려준다.
    - SQL의 절차적이고 순차적인 접근이 아닌 객체 지향적인 접근으로 인해 생산성이 증가한다.
    - 특정 DB에 구애받지 않는다.
    - 무엇을 요구하는지가 명확하게 한 눈에 보인다.
    - 재사용, 유지보수, 리팩토링 용이성
    
    - SQL의 절차적이고 순차적인 접근이 아닌 객체 지향적인 접근으로 인해 생산성이 증가한다.
    - ORM은 독립적으로 작성되어있고, 해당 객체들을 재활용 할 수 있다.
    - 때문에 모델에서 가공된 데이터를 컨트롤러에 의해 뷰와 합쳐지는 형태로 디자인 패턴을 견고하게 다지는데 유리하다.
    - 매핑정보가 명확하여, ERD를 보는 것에 대한 의존도를 낮출 수 있다.

    - DBMS에 대한 종속성이 줄어든다.
    - 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하기 때문에 RDBMS의 데이터 구조와 Java의 객체지향 모델 사이의 간격을 좁힐 수 있다.


    단점?

    - 완벽한 ORM으로만 서비스를 구현하기가 어렵다.
    - 사용하기는 편하지만 설계는 매우 신중하게 해야한다.
    - 프로젝트의 복잡성이 커질경우 난이도 또한 올라갈 수 있다.
    - 잘못 구현된 경우 속도 저하 및 심각한 경우 일관성이 무너지는 문제점이 생길 수 있다.
    - SQL을 배우듯 각 플랫폼별 ORM의 추상화된 질의어를 새롭게 배워야 한다.

++++++++++++++++++++++

    위 내용들을 간단하게 정리해보자면?

    ORM이 뭐야? Object Relational Mapping의 약자로 객체-관계 매핑(연결)을 뜻한다. 즉 쉽게 말하자면 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 의미한다. (객체 지향 프로그래밍은 클래스를 사용하고, 관계형 데이터베이스는 테이블을 사용하기때문에 객체 모델과 관계형 모델 간에 불일치가 존재한다, ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 이 불일치를 해결할 수 있다.)

    (예? 프로젝트에서 사용한 Sequelize)

    ORM을 이용하면 따로 SQL문을 짤 필요없이 객체를 통해 간접적으로 데이터베이스를 조작할 수 있게 된다.

    그렇다면 ORM을 왜써? 정말 간단하게 말하자면 여러가지 장점들 중 ORM은 SQL문법 대신 어플리케이션의 개발언어를 그대로 사용할 수 있게 함으로써, 개발 언어의 일관성과 가독성을 높여준다는 장점을 갖고 있다.

    좀 더 풀어서 설명하자면 ORM을 이용하면 SQL Query가 아닌 직관적인 코드로 데이터를 조작할 수 있게 되어 개발자가 객체-모델로 프로그래밍하는 데 집중할 수 있도록 도와준다. 또한 각종 객체에 대한 코드를 별도로 작성하기 때문에 코드의 가독성을 올려주고(무엇을 요구하는지가 명확하게 한 눈에 보인다), 특정 DB에 구애받지 않게 된다 (관계형데이터베이스이던 그렇지 않던 상관 없다). 마지막으로 재사용, 유지보수, 리팩토링이 용이해진다.

    그러면 단점은 없나? 사용하기는 편하지만 설계는 매우 신중하게 해야하고, 완벽한 ORM으로만 서비스를 구현하기가 어렵다는 단점이 있다. 또한 프로젝트의 복잡성이 커질경우 난이도 또한 올라갈 수 있어 잘못 구현된 경우 속도 저하 및 심각한 경우 일관성이 무너지는 문제점이 생길 수도 있다. 좀 더 와닿는 단점이라 하면 심각한건 아니지만 SQL을 배우듯 각 플랫폼별 ORM 문법를 새롭게 배워야 한다.

++++++++++++++++++++++

    데이터베이스 ORM에 대해서 배워봤다.
    전에도 말했지만 확실히 이전보단 뭔가 많이 알게 된 것 같고 이전에는 명확히 알지 못한채 사용을 했다면 이제는 왜 사용을 했는지, 어떠한 장점이 있는지, 어떠한 단점이 있을 수 있는지 알게 되어 내가 했었던 프로젝트에 관해서 조금 더 많이 설명할 수 있게 된것 같다.
    그치만 역시나 이런 개념적인 부분들을 완벽히 이해하고 머릿속에 넣어 내것으로 만드는것은 쉽지 않다, 그렇기에 그 부분에 대해 설명하는것 또한 마찬가지로 어렵다.
    이 설명하는 부분을 잘 해야 취업 기술 면접 시 잘 해낼 수 있을 것 같은데 아직은 많이 낯설고 어렵기만 하다.
    연습이 많이 필요 할 것 같다.

++++++++++++++++++++++
