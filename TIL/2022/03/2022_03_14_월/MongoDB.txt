++++++++++++++++++++++

    MongoDB의 특징?

    -10gen사에서 개발한 솔루션.

    - Key-value와 다르게 여러 용도로 사용이 가능(범용적)

    - 스키마를 고정하지 않는 형태라서,
        ㄴ 스키마 변경으로 인한 문제는 없다.
        ㄴ 데이터를 구조화해서 json 형태로 저장(데이터를 key-value화 해서 저장)
    
    - join이 불가능하기 때문에 join이 필요 없도록 데이터 설계가 필요하다.

    - 메모리맵 형태의 파일엔진 DB이기 때문에 메모리에 의존적이다.
        ㄴ 메모리가 클 경우 성능에 영향을 끼친다.
        ㄴ 메모리를 넘어서는 경우 성능이 급격히 저하된다.
    
    - 쌓아놓고 삭제가 없는 경우가 적합하다.
        ㄴ 로그데이터
        ㄴ 이벤트 참여 내역
        ㄴ 세션 
    
    - 트랜잭션이 필요한 금융, 결제, 빌링, 회원정보 등에는 부적합하다.
    (부분적으로 몽고DB를 사용해야 하는곳과 RDBMS를 사용해야 하는곳에 대해서 잘 판단을 해서 때에 따)

++++++++++++++++++++++

    도큐먼트 데이터 모델

    - 속성의 이름과 값으로 이루어진 쌍의 집합.
    - 속성은 문자열이나 숫자, 날짜 가능.
    - 배열 또는 다른 도큐먼트를 지정하는것도 가능함.
    - 하나의 도큐먼트에 필요한 정보를 모두 담아야 함.
    - one query로 모두 해결이 되게끔 collection model 설계를 해야함.
    - join이 불가능하므로 미리 embedding 시켜야함.

    - 도큐먼트 데이터 모델: 데이터 설계를 종이문서 설계하듯이 설계해야 한다.

++++++++++++++++++++++

    CRUD?

    - Create -> .save({})
    - Read -> .find()
    - Update -> .update()
    - Delete -> .remove({})

++++++++++++++++++++++

    Master-Slave 구조?

    - 데이터의 복사본을 Slave에 배치.
    - Master 장애에 따른 데이터 손실 없이 Slave 데이터 사용 가능.
    - Master 장애 발생 시 Slave에서 Master를 선출할 수 있다.(중단없는 서비스 가능)
    - 데이터 손실을 최소화하기 위해 저널링을 지원(MongoDB의 데이터 변화에 따른 모든 연산에 대한 로그를 기록해놨다가, 장애 발생시 그 로그들을 보면서 복구를 할 수 있도록 만들어져 있음.)
    
++++++++++++++++++++++


    

++++++++++++++++++++++
