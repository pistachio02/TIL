++++++++++++++++++++++

    Promise?

    프로미스가 뭐야?
    ㄴ 프로미스는 자바스크립트 비동기 처리에 사용되는 객체이다.

    이해하기가 쉽지 않은데..? 좀 더 이해하기 쉽게 풀어서 다 설명해줘봐.
    ㄴ 우선 전체적인 그림을 설명해보자.

    싱글쓰레드인 자바스크립트에서는 비동기 처리를 위해서 콜백(callback)을 사용해왔다.
    덕분에 비동기 처리를 온전히 해낼 수는 있었지만 이렇게 콜백이 사용되는 경우가 많아지면서 단점이 드러나게 되었다.
    그 단점은 바로 비동기 처리를 순차적으로 실행할 필요가 있는 경우에 비동기 처리를 중첩시켜서 표현할 수 밖에 없음으로

        1. 에러나, 예외처리가 어렵다는 점과 
        2. 중첩으로 인한 복잡도가 증가한다는 점이었다.

    크게 이 두 가지의 단점들을 해결하기위해 프로미스가 예전부터 라이브러리로 생겨났고, 이것을 ES6에서는 언어적 차원에서 지원하게 되었다.

    프로미스에 관해 여러가지 설명들도 많고 다양한 정의들도 많지만 가장 확실하게 프로미스에 대해 이해하려면 프로미스의 목적을 정확하게 이해하고 머릿속에 집어 넣는게 좋다는 판단이 들었다.

    프로미스의 목적은 "비동기에서 성공과 실패를 분리해서 메서드를 수행하자!" 이다.

    ~~

    그렇다면 프로미스는 어떻게 만드나?

    ㄴ let promise = new Promise((resolve, reject) => {}) 이런식으로 만든다.
    ㄴ 프로미스는 상태를 갖는다. 중요한것 두가지만 기억하면 되는데 fulfilled, rejected 두 개만 기억하자. fulfilled상태면 resolve()실행, rejected면 reject()실행이라고 보면 된다. 좀 더 쉽게 말하자면 뭔가를 실행하려고 할때 그것이 성공하면 fulfilled, 실패하면 rejected. 즉 성공시 resolve()가 실행되고, 실패 시 reject()가 실행된다고 보면 된다. (1가지 상태가 더 있긴 하다. pending 이라고 비동기 처리 로직이 아직 완료되지 않은 상태라고 보면 된다.)
    
    아까 맨 처음 프로미스는 비동기 처리에 사용되는 객체라고 설명했는데 그게 무슨 말이야?

    ㄴ 우리가 뭔가를 만들고 프로젝트를 하거나 웹 개발을 할때 비동기 함수를 만들어서 사용해야 되는 때가 생기는데, 그럴때 프로미스 객체를 리턴하게 만들어서 사용하게 되면 좀 전에 얘기했던 두가지 단점, 에러나 예외처리를 쉽게 처리할 수 있고, 콜백 헬 즉 콜백 함수의 중첩으로 인한 복잡도도 해결할 수 있게 되기 때문에 비동기 함수를 만들어서 써야 할 때에는 프로미스를 가져다 사용하면 좋다.

    프로미스에 대해서 또 알아야 하는점이 있다면 뭘까?

    ㄴ 프로미스의 또 다른 특징 중 하나는, 여러 개의 프로미스를 연결해서 사용할 수 있다는 점이다. 말만 들으면 쉽게 이해가 안될수도 있지만, 프로젝트에서 많이 사용했던 .then() 을 떠올리면 이해가 좀 더 빠르다. .then() 메서드를 호출하고 나면 새로운 프로미스 객체가 반환되는데 이에 따라 여러개의 프로미스를 체이닝(chaining) 해서 사용할 수 있다.

    ㄴ 프로미스의 에러처리 방법은 두가지 정도가 있을 수 있는데,

        1. .then() 의 두번째 인자로 에러를 처리하는 방법과
        2. .catch() 를 이용하는 방법
    
    위 두가지가 있다. 위 두 가지 방법 모두 프로미스의 reject() 메서드가 호출되어 실패 상태가 된 경우에 실행되는데 간단하게 말해서 프로미스의 로직이 정상적으로 돌아가지 않는 경우에 호출된다고 보면 이해가 쉽다. 두가지 방법 모두 사용이 가능하지만 가급적이면 .catch() 를 사용하는게 좋다. 

++++++++++++++++++++++
