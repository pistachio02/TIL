++++++++++++++++++++++

    우선 문제 풀이 사진들을 쭉 보면 알수 있듯이,
    나는 우선 매 달의 1일이 어떤 요일인지 계산을 해보고
    1일이 어떤 요일인지 알게된 후 1일 +7일인 8일, 또 +7일인 15일 이런 식으로 1일, 15일, 22일, 29일은 어떤 요일,
    또 다음 달에는 1일, 15일 22일 29일은 어떤 요일, 이렇게 쭉 파악한다음,
    1일의 요일이 똑같은 달끼리 묶어 객체로 만들어준 다음, 그 객체의 키로 각각의 요일들을 만들어주고, 그 요일들 안에 몇일 몇일이 들어가는지를 배열로 담아줬다.
    그렇게 되면 2016년의 모든 달의 모든 요일이 각각 어떤 날짜(몇일인지)를 가지고 있는지 파악이 되기때문에 그렇게 우선 데이터를 만들어주고,
    조건문으로 a가 어떤 달일때 b가 어떤 날짜일때를 조회해서 a월 b일이 무슨 요일인지를 찾아내는 함수를 만들어줬었다.

    정말 말 그대로 하드코딩 하듯이 하나하나 모든 경우의 수를 찾아가는 방법이었다.
    그 전에 조회할 데이터를 미리 객체로 만들어주기도 했고.
    문제를 풀면서도 풀수는 있는 방법이겠지만 효율적이지 못한, 뭔가 찝찝한 마음이 드는 문제였다.
    어쨌던 풀기는 했지만 훨씬 쉽고 간단한 방법이 있었다.
    그 방법은 아래에서 소개한다.

++++++++++++++++++++++

    function solution(a, b) {
        var arr = ['SUN','MON','TUE','WED','THU','FRI','SAT']; // day 라는 변수에는 0부터 6까지의 숫자(요일)이 담길것이기에 우선 arr이라는 변수에다가 각각의 요일을 일요일부터 토요일까지 문자열 형식으로 담아준다.
        var date = new Date(`2016-${a}-${b}`); // new Date() 메소드로 인자로 전달된 a와 b를 넣어서 날짜를 만든 뒤 date라는 변수에 담아주고,
        var day = date.getDay() // 그 date를 이용해 .getDay() 메소드를 사용해서 day라는 변수에 요일(숫자)을 담아준 뒤,
        return arr[day]; // 처음 만들어줬던 arr 배열을 활용해 arr[day], 즉 어떤 요일인지를 리턴해준다.
    }

    위를 보면 내가 몰랐던것이 getDay 라는것이었다.
    어떠한 날짜가 있고 그 날짜의 요일을 getDay 라는 메소드로 찾을 수 있는데
    위를 보면 day 는 2로 나올것이다.
    그 이유는 요일을 string 형식으로 리턴해주는게 아니로 일요일부터 토요일까지를 0부터 6까지의 숫자로 표기하기 때문에,
    0은 일요일, 1은 월요일, 2는 화요일, 3은 수요일, 4는 목요일, 5는 금요일, 6은 토요일 이런식으로 숫자로 표기해준다.
    그렇기 때문에 제일 먼저 arr 이라는 배열 안에 string 형식으로 된 요일들을 각각 먼저 입력을 해줬고,
    그 이후 a 와 b 로 들어온 각각의 숫자들을 new Date(`2016-${a}-${b}`) 안에 넣어서 날짜를 date라는 변수에 할당해주고,
    day라는 변수에다가 그 날짜의 요일을 찾을 수 있는 date.getDay()를 해서 숫자를 할당해준 다음,
    arr[day]을 한 뒤 그대로 리턴해주는 방식이었다.

    위 문제를 훨씬 더 쉽게 풀려면 딱 2가지만 알았어도 금방 풀 수 있었을텐데.
    new Date(`2016-${a}-${b}`); 하는 방법, 그리고 .getDay() 하는 방법.
    그 두가지만 알았더라도 하드코딩식으로 문제를 풀지 않았을텐데 정말 빡대가리인가 싶다.
    그래도 이렇게라도 알았으니 다음부터는 날짜나 요일을 찾는 방법에 대해서 쉬운 방법을 배우고 넘어간다 라고 생각해야 할 것 같다.

    개빡친다.

++++++++++++++++++++++
