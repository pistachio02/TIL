++++++++++++++++++++++

    자바스크립트 비동기 처리와 콜백 함수?

    비동기 처리가 뭐야?
    ㄴ 자바스크립트의 비동기 처리란 특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 않고 다음 코드를 먼저 실행하는 자바스크립트의 특성을 의미한다.

    비동기가 뭔지 예시를 들어가면서 설명해줘.

    1. 아래와 같다.

        function getData() {
            var tableData;
            $.get('https://domain.com/products/1', function(response) {
                tableData = response;
            });
            return tableData;
        }

        console.log(getData()); // undefined

        ㄴ 비동기 처리의 가장 흔한 사례인 제이쿼리의 ajax 이다. 제이쿼리로 웹 서비스를 개발할 때에는 ajax 통신을 빼놓을 수가 없는데, 보통 화면에 표시할 이미지나 데이터들을 서버에서 불러와 표시해야 하는데 이때 ajax 통신으로 해당 데이터들을 서버로부터 가져올 수 있기 때문이다.
        
        ㄴ 위 코드를 보면 $.get()이 ajax 통신을 하는 부분이고, https://domain.com 에다가 HTTP GET 요청을 날려 1번 상품(product) 정보를 요청하는 코드이다. 좀 더 쉽게 말하자면 지정된 URL에 ‘데이터를 하나 보내주세요’ 라는 요청을 날리는 것과 같은것인데, 이렇게 서버에서 받아온 데이터는 response 인자에 담기게 된다. 그리고 tableData = response 코드로 받아온 데이터를 tableData라는 변수에 저장하는것인데, 문제는 getData()를 호출해서 콘솔에 찍어보면 undefined가 나온다는 점이다. 왜 이럴까?
        
        ㄴ 그 이유는 $.get()로 데이터를 요청하고 받아올 때까지 기다려주지 않고 다음 코드인 return tableData를 실행했기 때문이다. 좀 더 쉽게 말하자면 데이터를 요청하는 코드를 날리고, 서버로부터 무언가 응답을 받기도 전에 return tableData 코드를 먼저 실행시켜서 아직 아무것도 담기지 않았다는 의미의 undefined가 찍히게 되는것이다.

        ㄴ 이렇게 특정 로직의 실행이 완료될때까지 기다려주지 않고 나머지 코드를 먼저 실행하는 것을 비동기 처리라고 한다.

    2. 아래와 같다.

        // #1
        console.log('Hello');
        // #2
        setTimeout(function() {
            console.log('Bye');
        }, 3000);
        // #3
        console.log('Hello Again');

        ㄴ 또 다른 비동기 처리 사례는 setTimeout()이다. setTimeout()은 Web API의 한 종류이고, 코드를 바로 실행시키지 않고 지정한 시간만큼 기다렸다가 로직을 실행하게 된다.

        ㄴ 위 코드에 만약 setTimeout()이 없게 된다면 코드가 적혀있는 순서대로 우선 'Hello', 그 다음 'Bye', 마지막으로 'Hello Again'이 콘솔에 찍히게 될테지만, 가운데 있는 setTimeout()의 시간 설정이 3000밀리세컨드 즉 3초로 되어있기 때문에 실제 콘솔창에는 'Hello', 'Hello Again', 'Bye'가 찍히게 되는것이다.

        ㄴ 그렇다면 이렇게 궁금해해 하는 사람도 있을것이다. 'Hello'가 찍힌 다음에 3초 뒤에 'Bye'가 찍히고, 그 다음 마지막으로 'Hello Again'이 찍혀야 하는거 아니야? 그렇게 생각할 수도 있지만 아까도 설명했든 setTimeout()은 비동기로 처리되기 때문에 3초동안 마냥 기다리는것이 아니라 다음 코드를 먼저 실행시키기 때문에 'Bye'가 제일 마지막에 찍히게 되는 것이다.

    3. 아래와 같다.

        function getData(callbackFunc) {
            $.get('https://domain.com/products/1', function(response) {
                callbackFunc(response); // 서버에서 받은 데이터 response를 callbackFunc() 함수에 넘겨줌
            });
        }

        getData(function(tableData) {
            console.log(tableData); // $.get()의 response 값이 tableData에 전달됨
        });

        ㄴ 위 코드는 제일 처음 예시를 들었던 ajax 요청을 콜백 함수를 이용해 개선해본 코드이다. 위 방법대로 작성하면 undefined라고 찍혔던것이 더 이상 보이지 않을텐데 그 이유는 콜백 함수를 활용함으로서 특정 로직이 끝났을 때 원하는 동작을 실행시킬 수 있게 되기 때문이다. 즉 데이터를 서버로부터 다 잘 받아오고 난 후 콘솔에 찍어보기 때문에 더 이상 undefined가 보이지 않는것이다.

    콜백 지옥이 뭐야? (what the hell is Callback Hell?!)

    ㄴ 콜백 지옥은 비동기 처리 로직을 위해 콜백 함수를 연속해서 사용할 때 발생하는 문제이다. 아래 코드를 보면 이해가 더 쉽게 될것이다.

        $.get('url', function(response) {
            parseValue(response, function(id) {
                auth(id, function(result) {
                    display(result, function(text) {
                        console.log(text);
                    });
                });
            });
        });
    
    ㄴ 만약 한두가지 작업을 해야 하는 경우라면 상관 없겠지만 엄청나게 많은 작업을 해야 하는 경우, 그리고 그 많은 작업들이 콜백으로 순차적으로 이뤄져야 하는 경우 위 코드보다도 훨씬 더 많은 콜백 함수를 사용하게 되어, 이후에는 코드가 가독성도 떨어지고 로직을 변경하기도 어렵게 작성이 되어버린다. 이러한 코드 구조를 가지는것을 콜백 지옥이라고 하는데, 그렇다면 어떻게 해야 콜백 지옥을 해결할 수 있을까?

    ㄴ 간단한 방법으로는 Promise나 Async Await 을 활용하는 방법이 있겠지만 만약 정말 그냥 코드적으로만 콜백 지옥을 해결하려면 아래와 같이 콜백 함수들을 각각 분리시켜주면 된다.

        function parseValueDone(id) {
            auth(id, authDone);
        }
        function authDone(result) {
            display(result, displayDone);
        }
        function displayDone(text) {
            console.log(text);
        }
        $.get('url', function(response) {
            parseValue(response, parseValueDone);
        });

    ㄴ 물론 위 코드도 개선이 조금 된 코드일 뿐 콜백지옥을 완전히 해결했다고 보기는 어렵다.

++++++++++++++++++++++
