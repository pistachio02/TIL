++++++++++++++++++++++

    function solution(n, lost, reserve) {
        let answer = 0;
        let hasUniform = new Array(n).fill(1); // [1,1,1,1,1]
        
        for(let i = 0; i < lost.length; i++) {
            hasUniform[lost[i] - 1]--;
        } // hasUniform = [1,0,1,0,1]
        
        for(let i = 0; i < reserve.length; i++) {
            hasUniform[reserve[i] - 1]++;
        } // hasUniform = [2,0,2,0,2]
        
        for(let i = 0; i < hasUniform.length; i++) {
            if(hasUniform[i] === 0) {
                if(hasUniform[i - 1] === 2) {
                    hasUniform[i]++;
                    hasUniform[i - 1]--;
                } else if(hasUniform[i + 1] === 2) {
                    hasUniform[i]++;
                    hasUniform[i + 1]--;
                }
            }
            if(hasUniform[i] >= 1) {
                answer++;
            }
        } // hasUniform = [1,1,1,1,2]
        
        return answer;
    }

    위 주석처리된것은 전체 학생수(n)가 5명, 체육복을 잃어버린 학생들을 나타내는 배열 lost [2,4], 그리고 여분의 체육복을 가지고 있는 학생들을 나타내는 배열 reserve [1,3,5]가 함수의 인자로 들어왔다고 가정을 하고 예시를 든것이다.

    우선 전체 학생수만큼의 길이(n)를 갖는 hasUniform 배열을 1로 채워줬다. (전체 학생수가 5명이면 hasUniform 은 [1,1,1,1,1]가 된다는 뜻)

    lost [2,4] 를 활용해 잃어버린 학생들의 번호를 가지고 hasUniform 배열 [1,1,1,1,1] 에서 잃어버린 학생이 있다면 0을 만들어 줬다. 즉 2번 4번 학생이 잃어버렸으니 hasUniform 배열 [1,1,1,1,1] 의 1번째, 3번째 인덱스를 0으로 바꿔줬다. 이제 hasUniform 배열은 [1,0,1,0,1]이 되었다.

    이번엔 reserve [1,3,5] 를 활용해 여분을 가지고 있는 학생들의 번호를 가지고 hasUniform 배열 [1,0,1,0,1] 에서 여분이 있는 학생이 있다면 +1을 해줬다. 즉 1번 3번 5번 학생이 여분이 있으니 hasUniform 배열 [1,0,1,0,1] 의 0번째, 2번째, 4번째 인덱스의 값에다가 +1을 해줬다. 이제 hasUniform 배열은 [2,0,2,0,2]가 되었다.

    for문으로 반복문을 실행시켜서 hasUniform 배열 [2,0,2,0,2] 에 0인 자리가 있다면, 그리고 0인 자리의 앞 뒤 자리의 값이 2라면, 0인 자리의 값을 +1을 해서 1로 만들고 2인 자리의 값을 -1을 해서 1로 만들어준다. 이 과정을 쭉 다 반복하고 나면 이제 hasUniform 배열은 [1,1,1,1,2] 이 된다.

    이렇게 되면 이제 hasUniform 배열 [1,1,1,1,2] 을 보고서 체육시간에 참여할 수 있는지 없는지를 알게 되는데, hasUniform 배열 [1,1,1,1,2] 안에 0인 자리가 있다면 그 학생은 체육복이 없다는 의미가 된다. 반대로 말하면 1이나 1이상이라면 그 학생은 체육시간에 참여할 수 있게 되기때문에 hasUniform 배열 [1,1,1,1,2] 안에 1이나 1이상인 숫자가 있다면 그럴때마다 answer++ 를 해준다.

    최종적으로 answer를 리턴해주면 체육시간에 참여할 수 있는 전체 학생의 수를 리턴할 수 있게 된다.

    // 이 문제는 greedy algorithm 이었는데 역시나 풀다가 몇가지 테스트케이스만 통과되고 전체 테스트케이스는 통과하지 못해 구글링해서 문제를 풀고 해석을 적어보았다. 알고리즘은 정말 대가리가 많이 깨진다. 빡친다.

++++++++++++++++++++++
