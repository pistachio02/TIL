++++++++++++++++++++++

    Async & Await?

    async와 await는 자바스크립트의 비동기 처리 패턴 중 가장 최근에 나온 문법으로 기존의 비동기 처리 방식인 콜백 함수와 프로미스의 단점을 보완하고 개발자가 읽기 좋은 코드를 작성할 수 있도록 도와준다.

    읽기 좋은 코드가 뭐야?
    아래 예시를 보면서 설명해보자.

        let user = {
            id: 1,
            name: 'Josh'
        };
        if (user.id === 1) {
            console.log(user.name); // Josh
        }
    
    위 코드를 보면 user라는 객체가 있고, if 조건문으로 콘솔창에 user의 name을 찍는다는걸 알 수 있다.
    이게 왜 읽기 좋은 코드냐? 
    말 그대로 코드가 위에서부터 아래로 한 줄 한 줄 차근차근 읽으면서 사고하는것이 편하고 이해하기도 쉽기 때문에 우리는 이런 코드를 읽기 좋은 코드라고 한다.

    그러면 왜 이 읽기 좋은 코드와 Async & Await이 연관이 있냐?
    우선 위 코드가 아닌 아래의 경우를 예로 들어 설명해보자.

        let user = fetchUser('domain.com/users/1');
        if (user.id === 1) {
            console.log(user.name);
        }
    
    이번에는 user가 단순히 우리가 하나하나 지정해준 객체가 아니고 서버로부터 얻어온 데이터라고 가정했을때의 코드이다.
    만약 위 코드를 어떠한 함수에 담아보면 어떨까? 아래와 같다.

        function logName() {
            let user = fetchUser('domain.com/users/1');
            if (user.id === 1) {
                console.log(user.name);
            }
        }
    
    logName이라는 함수는 서버로부터 유저의 데이터를 얻어와 user라는 변수에 담아주고 그 유저의 정보를 콘솔에 찍는 함수이다.
    이때 이 함수는 우선 유저의 정보를 서버로부터 얻어온 후 콘솔에 찍어야 정확하게 유저의 정보가 콘솔에 찍히게 된다. 하지만 전에도 설명했듯이 자바스크립트의 비동기 처리는 서버로부터 데이터를 다 받아오기도 전에 콘솔에 찍어버리려고 할 수가 있기에, 비동기 처리의 순서를 보장받으려면 아래와 같이 콜백 함수를 사용했었어야 했다.

        function logName() {
        let user = fetchUser('domain.com/users/1', function(user) {
            if (user.id === 1) {
            console.log(user.name);
            }
        });
        }

    위 코드처럼 콜백을 활용해서 코드를 작성해야 코드의 실행 순서를 보장 받을 수 있었는데, 만약 위와같은 콜백을 활용한 코드가 익숙한 사람들이라면 상관 없지만 그렇지 못한 사람들에게는 위 코드가 이해하기 조금 어려울 수 있을것이다.
    그래서 누가 봐도 위에서부터 아래대로 순서대로 실행되면서 콜백을 사용했을때보다 조금 더 이해하기 쉽고 간단하게 코드를 작성할 순 없을까 고민을 하다가 발견해낸것이 바로 Async & Await이다. Async & Await을 사용하면 아래와 같이 우리가 코드를 보고 읽을때 처음 그 위에서부터 아래로 순차적으로 코드가 실행된다는 사고로 돌아가서 그것에 근거해 코드를 작성 할 수 있게 되는것이다.

        async function logName() {
            var user = await fetchUser('domain.com/users/1');
            if (user.id === 1) {
                console.log(user.name);
            }
        }

    Async & Await을 사용하면 처음의 그 사고대로 코드를 좀 더 쉽고 빠르게 이해할 수 있도록, 그리고 좀 더 간단하게 작성할 수 있게 된다.

    중요한점?!

    Async & Await 중 Async는 꼭 함수 앞에다 작성해줘야 한다.
    Async & Await 중 Await은 꼭 프로미스 객체를 반환하는 코드(HTTP 통신을 하는 비동기처리코드) 앞에 붙여 사용해야 한다는 점이다.
    일반적으로는 Axios나 Fetch 등 프로미스를 반환하는 API 호출 함수에서 await이 많이 사용된다.

    기억해야 할 점?!

    Async 함수 안 Await 예약어는 반환값 Promise가 올때까지 기다렸다가 반환되면 그 다음 로직을 실행한다. 즉 Await 키워드를 쓰게 되면 해당 값이 반환되기 전까지 기다리는 동안 Async 함 수 내부의 다른 코드들은 일시 중단이 될 수 있다는것이다. 그냥 다른 코드들은 기다렸다가 Await 값이 반환되면 그때 마저 실행한다 라고 볼 수 있다.

    Async & Await의 예외처리?

    예외처리를 위해선 try catch 문법을 사용하면 된다. 아래 예시와 같다.

        async function logTodoTitle() {
            try {
                var user = await fetchUser('domain.com/users/1');
                if (user.id === 1) {
                    console.log(user.name);
                }
            } catch (error) {
                console.log(error);
            }
        }

    위 코드를 설명해보자면, 우선 try문 안에선 기존에 실행했던 대로 서버로부터 데이터를 받아와 콘솔에 데이터의 정보를 출력해주고,
    catch문 안에서는 만약 try문 안에 있던 코드가 정상적으로 실행되지 못하거나, 네트워크 통신 오류, 간단한 타입 오류 등 일반적인 오류 발생으로 인해 문제가 생긴다면 catch문 안에 있는 코드가 실행되게 되어, 예외처리까지도 가능하게 된다.

    ~~

    엄청 간략히 정리를 해보자면 Async & Await은 결국 코드의 실행 순서를 보장받기 위해 사용하는 것이고, 기존에 콜백와 프로미스의 단점을 보완해 개발자로서 조금이라도 더 가독성 좋은 코드를 작성할 수 있게 해주는것 이라고 생각할 수 있을 것 같다.

++++++++++++++++++++++
