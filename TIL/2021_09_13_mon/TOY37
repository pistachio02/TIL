<TIL>

Toy 37번

문제
-> 다양한 동전들을 가지고 특정 금액을 만들 수 있는 모든 경우의 수를 리턴해야 합니다.
    - 예를 들어, 100원, 500원짜리 동전을 가지고 1,000원을 만들 수 있는 방법은 총 3가지 입니다.
    - 100원 10개, 100원 5개 + 500원 1개, 500원 2개


인자 1 : total
-> number 타입의 이하의 자연수


인자 2 : coins
-> number 타입을 요소로 갖는 배열
-> coins.length는 10,000 이하
-> coins[i]는 20 이하의 양의 정수


출력
-> number 타입을 리턴해야 합니다.


주의사항
-> 동전의 금액은 다양하게 주어집니다.
-> coins는 오름차순으로 정렬되어 있습니다.
-> 각 동전의 개수는 무수히 많다고 가정합니다.


입출력 예시
⬇️⬇️⬇️⬇️⬇️⬇️

let total = 10;
let coins = [1, 5];
let output = coinChange(total, coins);
console.log(output); // --> 3

total = 4;
coins = [1, 2, 3];
output = coinChange(total, coins);
console.log(output); // --> 4 ([1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3])


// coins라는 배열을 인자로 전달 받아 coins의 요소인 여러 숫자들을 가지고 total을 만들 수 있는 방법의 개수를 리턴하는것이다.


Advanced?
⬇️⬇️⬇️⬇️⬇️⬇️

coinChange를 계산하는 효율적인 알고리즘(O(M * N))이 존재합니다(total과 coins.length가 N, M일 경우). 쉽지 않기 때문에 바로 레퍼런스 코드를 보고 이해하는 데 집중하시기 바랍니다.


문제 풀이
⬇️⬇️⬇️⬇️⬇️

const coinChange = function (total, coins) {
  // TODO: 여기에 코드를 작성합니다.
  const memo = []; // memo 라는 빈 배열을 하나 만들어두고,

  for(let i = 0; i < total + 1; i++) memo.push(Array(coins.length).fill(-1)); // for 반복문으로 total의 길이 + 1만큼 반복문을 돌려 memo라는 빈 배열에 coins의 길이 만큼의 -1로 채워진 배열을 푸시한다.
  // total이 10이고, coins가 [1, 5]일때 memo.length는 11이 되고, memo[i]는 [-1, -1]이 된다. 그러니까 메모라는 배열안에 [-1, -1]이 11개 있다고 보면 된다.

  const makeChageFrom = (left, idx) => { // makeChageFrom이라는 변수에 left와 idx를 인자로 받는 함수를 만들어 할당하고,
    
    if(left === 0) return 1; // left가 0이면 1을 리턴,
    if(left < 0) return 0; // left가 0보다 작으면 0을 리턴,
    if(idx >= coins.length && left > 0) return 0; // idx가 coins의 길이와 left보다 같거나 크면 0을 리턴,
    if(memo[left][idx] !== -1) return memo[left][idx]; // memo[left][idx]가 -1이 아니면 memo[left][idx] 자체를 리턴,
    
    memo[left][idx] = // memo[left][idx]에다가 makeChageFrom(left, idx + 1) + makeChageFrom(left - coins[idx], idx)를 할당해주고,
      makeChageFrom(left, idx + 1) + makeChageFrom(left - coins[idx], idx);
    return memo[left][idx]; // memo[left][idx]를 리턴,
  };

  return makeChageFrom(total, 0); // 최종적으로 makeChageFrom(total, 0)를 리턴해준다.
};
